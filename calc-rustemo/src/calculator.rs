/// Generated by rustemo. Do not edit manually!
use std::fmt::Debug;
use std::hash::Hash;
use rustemo::{
    Result, Input as InputT, Lexer, Token, TokenRecognizer as TokenRecognizerT, Parser,
    ParserDefinition, State as StateT, Builder,
};
use regex::Regex;
use once_cell::sync::Lazy;
use rustemo::StringLexer;
use rustemo::LRBuilder;
use super::calculator_actions;
use rustemo::{LRParser, LRContext};
use rustemo::Action::{self, Shift, Reduce, Accept};
#[allow(unused_imports)]
use rustemo::debug::{log, logn};
#[allow(unused_imports)]
#[cfg(debug_assertions)]
use colored::*;
pub type Input = str;
const STATE_COUNT: usize = 79usize;
const MAX_RECOGNIZERS: usize = 23usize;
#[allow(dead_code)]
const TERMINAL_COUNT: usize = 33usize;
#[allow(clippy::upper_case_acronyms)]
#[derive(Debug, Default, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub enum TokenKind {
    #[default]
    STOP,
    Number,
    Symbol,
    LogicAnd,
    LogicOr,
    Comma,
    Plus,
    Minus,
    Mul,
    Mod,
    Div,
    Exp,
    BeginParen,
    EndParen,
    LessThan,
    GreaterThan,
    LessThanEq,
    GreaterThanEq,
    EqualTo,
    NotEqualTo,
    Not,
    True,
    False,
    If,
    Then,
    Else,
    Match,
    Case,
    Arrow,
    BeginCurly,
    EndCurly,
    SemiColon,
    MatchAny,
}
use TokenKind as TK;
impl From<TokenKind> for usize {
    fn from(t: TokenKind) -> Self {
        t as usize
    }
}
#[allow(clippy::enum_variant_names)]
#[derive(Clone, Copy, PartialEq)]
pub enum ProdKind {
    ExprP1,
    SequenceExprP1,
    TupleExpr1P1,
    TupleExpr1P2,
    TupleExprP1,
    ConditionalExpr1P1,
    ConditionalExpr1P2,
    PatternP1,
    PatternP2,
    CaseMatchP1,
    CaseArmsP1,
    CaseMatch1P1,
    CaseMatch1P2,
    ConditionalExprP1,
    ConditionalExprIfThenElseExpr,
    ConditionalExprP3,
    BinaryExprP1,
    BinaryExprLogicalOrExpr,
    BinaryExprLogicalAndExpr,
    BinaryExprEqExpr,
    BinaryExprNotEqExpr,
    BinaryExprLTExpr,
    BinaryExprGTExpr,
    BinaryExprLTEqExpr,
    BinaryExprGTEqExpr,
    BinaryExprAddExpr,
    BinaryExprSubExpr,
    BinaryExprMultExpr,
    BinaryExprDivExpr,
    BinaryExprModExpr,
    BinaryExprExpExpr,
    UnaryExprP1,
    UnaryExprP2,
    UnaryExprP3,
    UnaryExprUminusExpr,
    UnaryExprUplusExpr,
    UnaryExprNotExpr,
    LiteralP1,
    LiteralP2,
    LiteralP3,
    LiteralP4,
}
use ProdKind as PK;
impl std::fmt::Debug for ProdKind {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let name = match self {
            ProdKind::ExprP1 => "Expr: SequenceExpr",
            ProdKind::SequenceExprP1 => "SequenceExpr: TupleExpr1",
            ProdKind::TupleExpr1P1 => "TupleExpr1: TupleExpr1 SemiColon TupleExpr",
            ProdKind::TupleExpr1P2 => "TupleExpr1: TupleExpr",
            ProdKind::TupleExprP1 => "TupleExpr: ConditionalExpr1",
            ProdKind::ConditionalExpr1P1 => {
                "ConditionalExpr1: ConditionalExpr1 Comma ConditionalExpr"
            }
            ProdKind::ConditionalExpr1P2 => "ConditionalExpr1: ConditionalExpr",
            ProdKind::PatternP1 => "Pattern: Literal",
            ProdKind::PatternP2 => "Pattern: MatchAny",
            ProdKind::CaseMatchP1 => "CaseMatch: Case Pattern Arrow BinaryExpr",
            ProdKind::CaseArmsP1 => "CaseArms: CaseMatch1",
            ProdKind::CaseMatch1P1 => "CaseMatch1: CaseMatch1 Comma CaseMatch",
            ProdKind::CaseMatch1P2 => "CaseMatch1: CaseMatch",
            ProdKind::ConditionalExprP1 => "ConditionalExpr: BinaryExpr",
            ProdKind::ConditionalExprIfThenElseExpr => {
                "ConditionalExpr: If BinaryExpr Then BinaryExpr Else BinaryExpr"
            }
            ProdKind::ConditionalExprP3 => {
                "ConditionalExpr: Match BinaryExpr BeginCurly CaseArms EndCurly"
            }
            ProdKind::BinaryExprP1 => "BinaryExpr: UnaryExpr",
            ProdKind::BinaryExprLogicalOrExpr => {
                "BinaryExpr: BinaryExpr LogicOr BinaryExpr"
            }
            ProdKind::BinaryExprLogicalAndExpr => {
                "BinaryExpr: BinaryExpr LogicAnd BinaryExpr"
            }
            ProdKind::BinaryExprEqExpr => "BinaryExpr: BinaryExpr EqualTo BinaryExpr",
            ProdKind::BinaryExprNotEqExpr => {
                "BinaryExpr: BinaryExpr NotEqualTo BinaryExpr"
            }
            ProdKind::BinaryExprLTExpr => "BinaryExpr: BinaryExpr LessThan BinaryExpr",
            ProdKind::BinaryExprGTExpr => "BinaryExpr: BinaryExpr GreaterThan BinaryExpr",
            ProdKind::BinaryExprLTEqExpr => {
                "BinaryExpr: BinaryExpr LessThanEq BinaryExpr"
            }
            ProdKind::BinaryExprGTEqExpr => {
                "BinaryExpr: BinaryExpr GreaterThanEq BinaryExpr"
            }
            ProdKind::BinaryExprAddExpr => "BinaryExpr: BinaryExpr Plus BinaryExpr",
            ProdKind::BinaryExprSubExpr => "BinaryExpr: BinaryExpr Minus BinaryExpr",
            ProdKind::BinaryExprMultExpr => "BinaryExpr: BinaryExpr Mul BinaryExpr",
            ProdKind::BinaryExprDivExpr => "BinaryExpr: BinaryExpr Div BinaryExpr",
            ProdKind::BinaryExprModExpr => "BinaryExpr: BinaryExpr Mod BinaryExpr",
            ProdKind::BinaryExprExpExpr => "BinaryExpr: BinaryExpr Exp BinaryExpr",
            ProdKind::UnaryExprP1 => "UnaryExpr: Literal",
            ProdKind::UnaryExprP2 => "UnaryExpr: BeginParen TupleExpr EndParen",
            ProdKind::UnaryExprP3 => "UnaryExpr: BeginCurly SequenceExpr EndCurly",
            ProdKind::UnaryExprUminusExpr => "UnaryExpr: Minus UnaryExpr",
            ProdKind::UnaryExprUplusExpr => "UnaryExpr: Plus UnaryExpr",
            ProdKind::UnaryExprNotExpr => "UnaryExpr: Not UnaryExpr",
            ProdKind::LiteralP1 => "Literal: Number",
            ProdKind::LiteralP2 => "Literal: Symbol",
            ProdKind::LiteralP3 => "Literal: True",
            ProdKind::LiteralP4 => "Literal: False",
        };
        write!(f, "{}", name)
    }
}
#[allow(clippy::upper_case_acronyms)]
#[allow(dead_code)]
#[derive(Clone, Copy, Debug)]
pub enum NonTermKind {
    EMPTY,
    AUG,
    Expr,
    SequenceExpr,
    TupleExpr1,
    TupleExpr,
    ConditionalExpr1,
    Pattern,
    CaseMatch,
    CaseArms,
    CaseMatch1,
    ConditionalExpr,
    BinaryExpr,
    UnaryExpr,
    Literal,
}
impl From<ProdKind> for NonTermKind {
    fn from(prod: ProdKind) -> Self {
        match prod {
            ProdKind::ExprP1 => NonTermKind::Expr,
            ProdKind::SequenceExprP1 => NonTermKind::SequenceExpr,
            ProdKind::TupleExpr1P1 => NonTermKind::TupleExpr1,
            ProdKind::TupleExpr1P2 => NonTermKind::TupleExpr1,
            ProdKind::TupleExprP1 => NonTermKind::TupleExpr,
            ProdKind::ConditionalExpr1P1 => NonTermKind::ConditionalExpr1,
            ProdKind::ConditionalExpr1P2 => NonTermKind::ConditionalExpr1,
            ProdKind::PatternP1 => NonTermKind::Pattern,
            ProdKind::PatternP2 => NonTermKind::Pattern,
            ProdKind::CaseMatchP1 => NonTermKind::CaseMatch,
            ProdKind::CaseArmsP1 => NonTermKind::CaseArms,
            ProdKind::CaseMatch1P1 => NonTermKind::CaseMatch1,
            ProdKind::CaseMatch1P2 => NonTermKind::CaseMatch1,
            ProdKind::ConditionalExprP1 => NonTermKind::ConditionalExpr,
            ProdKind::ConditionalExprIfThenElseExpr => NonTermKind::ConditionalExpr,
            ProdKind::ConditionalExprP3 => NonTermKind::ConditionalExpr,
            ProdKind::BinaryExprP1 => NonTermKind::BinaryExpr,
            ProdKind::BinaryExprLogicalOrExpr => NonTermKind::BinaryExpr,
            ProdKind::BinaryExprLogicalAndExpr => NonTermKind::BinaryExpr,
            ProdKind::BinaryExprEqExpr => NonTermKind::BinaryExpr,
            ProdKind::BinaryExprNotEqExpr => NonTermKind::BinaryExpr,
            ProdKind::BinaryExprLTExpr => NonTermKind::BinaryExpr,
            ProdKind::BinaryExprGTExpr => NonTermKind::BinaryExpr,
            ProdKind::BinaryExprLTEqExpr => NonTermKind::BinaryExpr,
            ProdKind::BinaryExprGTEqExpr => NonTermKind::BinaryExpr,
            ProdKind::BinaryExprAddExpr => NonTermKind::BinaryExpr,
            ProdKind::BinaryExprSubExpr => NonTermKind::BinaryExpr,
            ProdKind::BinaryExprMultExpr => NonTermKind::BinaryExpr,
            ProdKind::BinaryExprDivExpr => NonTermKind::BinaryExpr,
            ProdKind::BinaryExprModExpr => NonTermKind::BinaryExpr,
            ProdKind::BinaryExprExpExpr => NonTermKind::BinaryExpr,
            ProdKind::UnaryExprP1 => NonTermKind::UnaryExpr,
            ProdKind::UnaryExprP2 => NonTermKind::UnaryExpr,
            ProdKind::UnaryExprP3 => NonTermKind::UnaryExpr,
            ProdKind::UnaryExprUminusExpr => NonTermKind::UnaryExpr,
            ProdKind::UnaryExprUplusExpr => NonTermKind::UnaryExpr,
            ProdKind::UnaryExprNotExpr => NonTermKind::UnaryExpr,
            ProdKind::LiteralP1 => NonTermKind::Literal,
            ProdKind::LiteralP2 => NonTermKind::Literal,
            ProdKind::LiteralP3 => NonTermKind::Literal,
            ProdKind::LiteralP4 => NonTermKind::Literal,
        }
    }
}
#[allow(clippy::enum_variant_names)]
#[derive(Default, Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]
pub enum State {
    #[default]
    AUGS0,
    NumberS1,
    SymbolS2,
    PlusS3,
    MinusS4,
    BeginParenS5,
    NotS6,
    TrueS7,
    FalseS8,
    IfS9,
    MatchS10,
    BeginCurlyS11,
    ExprS12,
    SequenceExprS13,
    TupleExpr1S14,
    TupleExprS15,
    ConditionalExpr1S16,
    ConditionalExprS17,
    BinaryExprS18,
    UnaryExprS19,
    LiteralS20,
    UnaryExprS21,
    UnaryExprS22,
    TupleExprS23,
    UnaryExprS24,
    BinaryExprS25,
    BinaryExprS26,
    SequenceExprS27,
    SemiColonS28,
    CommaS29,
    LogicAndS30,
    LogicOrS31,
    PlusS32,
    MinusS33,
    MulS34,
    ModS35,
    DivS36,
    ExpS37,
    LessThanS38,
    GreaterThanS39,
    LessThanEqS40,
    GreaterThanEqS41,
    EqualToS42,
    NotEqualToS43,
    EndParenS44,
    ThenS45,
    BeginCurlyS46,
    EndCurlyS47,
    TupleExprS48,
    ConditionalExprS49,
    BinaryExprS50,
    BinaryExprS51,
    BinaryExprS52,
    BinaryExprS53,
    BinaryExprS54,
    BinaryExprS55,
    BinaryExprS56,
    BinaryExprS57,
    BinaryExprS58,
    BinaryExprS59,
    BinaryExprS60,
    BinaryExprS61,
    BinaryExprS62,
    BinaryExprS63,
    BinaryExprS64,
    CaseS65,
    CaseMatchS66,
    CaseArmsS67,
    CaseMatch1S68,
    ElseS69,
    MatchAnyS70,
    PatternS71,
    LiteralS72,
    EndCurlyS73,
    CommaS74,
    BinaryExprS75,
    ArrowS76,
    CaseMatchS77,
    BinaryExprS78,
}
impl StateT for State {
    fn default_layout() -> Option<Self> {
        None
    }
}
impl From<State> for usize {
    fn from(s: State) -> Self {
        s as usize
    }
}
impl std::fmt::Debug for State {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let name = match self {
            State::AUGS0 => "0:AUG",
            State::NumberS1 => "1:Number",
            State::SymbolS2 => "2:Symbol",
            State::PlusS3 => "3:Plus",
            State::MinusS4 => "4:Minus",
            State::BeginParenS5 => "5:BeginParen",
            State::NotS6 => "6:Not",
            State::TrueS7 => "7:True",
            State::FalseS8 => "8:False",
            State::IfS9 => "9:If",
            State::MatchS10 => "10:Match",
            State::BeginCurlyS11 => "11:BeginCurly",
            State::ExprS12 => "12:Expr",
            State::SequenceExprS13 => "13:SequenceExpr",
            State::TupleExpr1S14 => "14:TupleExpr1",
            State::TupleExprS15 => "15:TupleExpr",
            State::ConditionalExpr1S16 => "16:ConditionalExpr1",
            State::ConditionalExprS17 => "17:ConditionalExpr",
            State::BinaryExprS18 => "18:BinaryExpr",
            State::UnaryExprS19 => "19:UnaryExpr",
            State::LiteralS20 => "20:Literal",
            State::UnaryExprS21 => "21:UnaryExpr",
            State::UnaryExprS22 => "22:UnaryExpr",
            State::TupleExprS23 => "23:TupleExpr",
            State::UnaryExprS24 => "24:UnaryExpr",
            State::BinaryExprS25 => "25:BinaryExpr",
            State::BinaryExprS26 => "26:BinaryExpr",
            State::SequenceExprS27 => "27:SequenceExpr",
            State::SemiColonS28 => "28:SemiColon",
            State::CommaS29 => "29:Comma",
            State::LogicAndS30 => "30:LogicAnd",
            State::LogicOrS31 => "31:LogicOr",
            State::PlusS32 => "32:Plus",
            State::MinusS33 => "33:Minus",
            State::MulS34 => "34:Mul",
            State::ModS35 => "35:Mod",
            State::DivS36 => "36:Div",
            State::ExpS37 => "37:Exp",
            State::LessThanS38 => "38:LessThan",
            State::GreaterThanS39 => "39:GreaterThan",
            State::LessThanEqS40 => "40:LessThanEq",
            State::GreaterThanEqS41 => "41:GreaterThanEq",
            State::EqualToS42 => "42:EqualTo",
            State::NotEqualToS43 => "43:NotEqualTo",
            State::EndParenS44 => "44:EndParen",
            State::ThenS45 => "45:Then",
            State::BeginCurlyS46 => "46:BeginCurly",
            State::EndCurlyS47 => "47:EndCurly",
            State::TupleExprS48 => "48:TupleExpr",
            State::ConditionalExprS49 => "49:ConditionalExpr",
            State::BinaryExprS50 => "50:BinaryExpr",
            State::BinaryExprS51 => "51:BinaryExpr",
            State::BinaryExprS52 => "52:BinaryExpr",
            State::BinaryExprS53 => "53:BinaryExpr",
            State::BinaryExprS54 => "54:BinaryExpr",
            State::BinaryExprS55 => "55:BinaryExpr",
            State::BinaryExprS56 => "56:BinaryExpr",
            State::BinaryExprS57 => "57:BinaryExpr",
            State::BinaryExprS58 => "58:BinaryExpr",
            State::BinaryExprS59 => "59:BinaryExpr",
            State::BinaryExprS60 => "60:BinaryExpr",
            State::BinaryExprS61 => "61:BinaryExpr",
            State::BinaryExprS62 => "62:BinaryExpr",
            State::BinaryExprS63 => "63:BinaryExpr",
            State::BinaryExprS64 => "64:BinaryExpr",
            State::CaseS65 => "65:Case",
            State::CaseMatchS66 => "66:CaseMatch",
            State::CaseArmsS67 => "67:CaseArms",
            State::CaseMatch1S68 => "68:CaseMatch1",
            State::ElseS69 => "69:Else",
            State::MatchAnyS70 => "70:MatchAny",
            State::PatternS71 => "71:Pattern",
            State::LiteralS72 => "72:Literal",
            State::EndCurlyS73 => "73:EndCurly",
            State::CommaS74 => "74:Comma",
            State::BinaryExprS75 => "75:BinaryExpr",
            State::ArrowS76 => "76:Arrow",
            State::CaseMatchS77 => "77:CaseMatch",
            State::BinaryExprS78 => "78:BinaryExpr",
        };
        write!(f, "{name}")
    }
}
#[derive(Debug)]
pub enum Symbol {
    Terminal(Terminal),
    NonTerminal(NonTerminal),
}
#[allow(clippy::upper_case_acronyms)]
#[derive(Debug)]
pub enum Terminal {
    Number(calculator_actions::Number),
    Symbol(calculator_actions::Symbol),
    LogicAnd,
    LogicOr,
    Comma,
    Plus,
    Minus,
    Mul,
    Mod,
    Div,
    Exp,
    BeginParen,
    EndParen,
    LessThan,
    GreaterThan,
    LessThanEq,
    GreaterThanEq,
    EqualTo,
    NotEqualTo,
    Not,
    True,
    False,
    If,
    Then,
    Else,
    Match,
    Case,
    Arrow,
    BeginCurly,
    EndCurly,
    SemiColon,
    MatchAny,
}
#[derive(Debug)]
pub enum NonTerminal {
    Expr(calculator_actions::Expr),
    SequenceExpr(calculator_actions::SequenceExpr),
    TupleExpr1(calculator_actions::TupleExpr1),
    TupleExpr(calculator_actions::TupleExpr),
    ConditionalExpr1(calculator_actions::ConditionalExpr1),
    Pattern(calculator_actions::Pattern),
    CaseMatch(calculator_actions::CaseMatch),
    CaseArms(calculator_actions::CaseArms),
    CaseMatch1(calculator_actions::CaseMatch1),
    ConditionalExpr(calculator_actions::ConditionalExpr),
    BinaryExpr(calculator_actions::BinaryExpr),
    UnaryExpr(calculator_actions::UnaryExpr),
    Literal(calculator_actions::Literal),
}
type ActionFn = fn(token: TokenKind) -> Vec<Action<State, ProdKind>>;
pub struct CalculatorParserDefinition {
    actions: [ActionFn; STATE_COUNT],
    gotos: [fn(nonterm: NonTermKind) -> State; STATE_COUNT],
    token_kinds: [[Option<(TokenKind, bool)>; MAX_RECOGNIZERS]; STATE_COUNT],
}
fn action_aug_s0(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Number => Vec::from(&[Shift(State::NumberS1)]),
        TK::Symbol => Vec::from(&[Shift(State::SymbolS2)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS3)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS4)]),
        TK::BeginParen => Vec::from(&[Shift(State::BeginParenS5)]),
        TK::Not => Vec::from(&[Shift(State::NotS6)]),
        TK::True => Vec::from(&[Shift(State::TrueS7)]),
        TK::False => Vec::from(&[Shift(State::FalseS8)]),
        TK::If => Vec::from(&[Shift(State::IfS9)]),
        TK::Match => Vec::from(&[Shift(State::MatchS10)]),
        TK::BeginCurly => Vec::from(&[Shift(State::BeginCurlyS11)]),
        _ => vec![],
    }
}
fn action_number_s1(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::LiteralP1, 1usize)]),
        TK::LogicAnd => Vec::from(&[Reduce(PK::LiteralP1, 1usize)]),
        TK::LogicOr => Vec::from(&[Reduce(PK::LiteralP1, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::LiteralP1, 1usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::LiteralP1, 1usize)]),
        TK::Minus => Vec::from(&[Reduce(PK::LiteralP1, 1usize)]),
        TK::Mul => Vec::from(&[Reduce(PK::LiteralP1, 1usize)]),
        TK::Mod => Vec::from(&[Reduce(PK::LiteralP1, 1usize)]),
        TK::Div => Vec::from(&[Reduce(PK::LiteralP1, 1usize)]),
        TK::Exp => Vec::from(&[Reduce(PK::LiteralP1, 1usize)]),
        TK::EndParen => Vec::from(&[Reduce(PK::LiteralP1, 1usize)]),
        TK::LessThan => Vec::from(&[Reduce(PK::LiteralP1, 1usize)]),
        TK::GreaterThan => Vec::from(&[Reduce(PK::LiteralP1, 1usize)]),
        TK::LessThanEq => Vec::from(&[Reduce(PK::LiteralP1, 1usize)]),
        TK::GreaterThanEq => Vec::from(&[Reduce(PK::LiteralP1, 1usize)]),
        TK::EqualTo => Vec::from(&[Reduce(PK::LiteralP1, 1usize)]),
        TK::NotEqualTo => Vec::from(&[Reduce(PK::LiteralP1, 1usize)]),
        TK::Then => Vec::from(&[Reduce(PK::LiteralP1, 1usize)]),
        TK::Else => Vec::from(&[Reduce(PK::LiteralP1, 1usize)]),
        TK::Arrow => Vec::from(&[Reduce(PK::LiteralP1, 1usize)]),
        TK::BeginCurly => Vec::from(&[Reduce(PK::LiteralP1, 1usize)]),
        TK::EndCurly => Vec::from(&[Reduce(PK::LiteralP1, 1usize)]),
        TK::SemiColon => Vec::from(&[Reduce(PK::LiteralP1, 1usize)]),
        _ => vec![],
    }
}
fn action_symbol_s2(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::LiteralP2, 1usize)]),
        TK::LogicAnd => Vec::from(&[Reduce(PK::LiteralP2, 1usize)]),
        TK::LogicOr => Vec::from(&[Reduce(PK::LiteralP2, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::LiteralP2, 1usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::LiteralP2, 1usize)]),
        TK::Minus => Vec::from(&[Reduce(PK::LiteralP2, 1usize)]),
        TK::Mul => Vec::from(&[Reduce(PK::LiteralP2, 1usize)]),
        TK::Mod => Vec::from(&[Reduce(PK::LiteralP2, 1usize)]),
        TK::Div => Vec::from(&[Reduce(PK::LiteralP2, 1usize)]),
        TK::Exp => Vec::from(&[Reduce(PK::LiteralP2, 1usize)]),
        TK::EndParen => Vec::from(&[Reduce(PK::LiteralP2, 1usize)]),
        TK::LessThan => Vec::from(&[Reduce(PK::LiteralP2, 1usize)]),
        TK::GreaterThan => Vec::from(&[Reduce(PK::LiteralP2, 1usize)]),
        TK::LessThanEq => Vec::from(&[Reduce(PK::LiteralP2, 1usize)]),
        TK::GreaterThanEq => Vec::from(&[Reduce(PK::LiteralP2, 1usize)]),
        TK::EqualTo => Vec::from(&[Reduce(PK::LiteralP2, 1usize)]),
        TK::NotEqualTo => Vec::from(&[Reduce(PK::LiteralP2, 1usize)]),
        TK::Then => Vec::from(&[Reduce(PK::LiteralP2, 1usize)]),
        TK::Else => Vec::from(&[Reduce(PK::LiteralP2, 1usize)]),
        TK::Arrow => Vec::from(&[Reduce(PK::LiteralP2, 1usize)]),
        TK::BeginCurly => Vec::from(&[Reduce(PK::LiteralP2, 1usize)]),
        TK::EndCurly => Vec::from(&[Reduce(PK::LiteralP2, 1usize)]),
        TK::SemiColon => Vec::from(&[Reduce(PK::LiteralP2, 1usize)]),
        _ => vec![],
    }
}
fn action_plus_s3(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Number => Vec::from(&[Shift(State::NumberS1)]),
        TK::Symbol => Vec::from(&[Shift(State::SymbolS2)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS3)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS4)]),
        TK::BeginParen => Vec::from(&[Shift(State::BeginParenS5)]),
        TK::Not => Vec::from(&[Shift(State::NotS6)]),
        TK::True => Vec::from(&[Shift(State::TrueS7)]),
        TK::False => Vec::from(&[Shift(State::FalseS8)]),
        TK::BeginCurly => Vec::from(&[Shift(State::BeginCurlyS11)]),
        _ => vec![],
    }
}
fn action_minus_s4(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Number => Vec::from(&[Shift(State::NumberS1)]),
        TK::Symbol => Vec::from(&[Shift(State::SymbolS2)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS3)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS4)]),
        TK::BeginParen => Vec::from(&[Shift(State::BeginParenS5)]),
        TK::Not => Vec::from(&[Shift(State::NotS6)]),
        TK::True => Vec::from(&[Shift(State::TrueS7)]),
        TK::False => Vec::from(&[Shift(State::FalseS8)]),
        TK::BeginCurly => Vec::from(&[Shift(State::BeginCurlyS11)]),
        _ => vec![],
    }
}
fn action_beginparen_s5(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Number => Vec::from(&[Shift(State::NumberS1)]),
        TK::Symbol => Vec::from(&[Shift(State::SymbolS2)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS3)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS4)]),
        TK::BeginParen => Vec::from(&[Shift(State::BeginParenS5)]),
        TK::Not => Vec::from(&[Shift(State::NotS6)]),
        TK::True => Vec::from(&[Shift(State::TrueS7)]),
        TK::False => Vec::from(&[Shift(State::FalseS8)]),
        TK::If => Vec::from(&[Shift(State::IfS9)]),
        TK::Match => Vec::from(&[Shift(State::MatchS10)]),
        TK::BeginCurly => Vec::from(&[Shift(State::BeginCurlyS11)]),
        _ => vec![],
    }
}
fn action_not_s6(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Number => Vec::from(&[Shift(State::NumberS1)]),
        TK::Symbol => Vec::from(&[Shift(State::SymbolS2)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS3)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS4)]),
        TK::BeginParen => Vec::from(&[Shift(State::BeginParenS5)]),
        TK::Not => Vec::from(&[Shift(State::NotS6)]),
        TK::True => Vec::from(&[Shift(State::TrueS7)]),
        TK::False => Vec::from(&[Shift(State::FalseS8)]),
        TK::BeginCurly => Vec::from(&[Shift(State::BeginCurlyS11)]),
        _ => vec![],
    }
}
fn action_true_s7(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::LiteralP3, 1usize)]),
        TK::LogicAnd => Vec::from(&[Reduce(PK::LiteralP3, 1usize)]),
        TK::LogicOr => Vec::from(&[Reduce(PK::LiteralP3, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::LiteralP3, 1usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::LiteralP3, 1usize)]),
        TK::Minus => Vec::from(&[Reduce(PK::LiteralP3, 1usize)]),
        TK::Mul => Vec::from(&[Reduce(PK::LiteralP3, 1usize)]),
        TK::Mod => Vec::from(&[Reduce(PK::LiteralP3, 1usize)]),
        TK::Div => Vec::from(&[Reduce(PK::LiteralP3, 1usize)]),
        TK::Exp => Vec::from(&[Reduce(PK::LiteralP3, 1usize)]),
        TK::EndParen => Vec::from(&[Reduce(PK::LiteralP3, 1usize)]),
        TK::LessThan => Vec::from(&[Reduce(PK::LiteralP3, 1usize)]),
        TK::GreaterThan => Vec::from(&[Reduce(PK::LiteralP3, 1usize)]),
        TK::LessThanEq => Vec::from(&[Reduce(PK::LiteralP3, 1usize)]),
        TK::GreaterThanEq => Vec::from(&[Reduce(PK::LiteralP3, 1usize)]),
        TK::EqualTo => Vec::from(&[Reduce(PK::LiteralP3, 1usize)]),
        TK::NotEqualTo => Vec::from(&[Reduce(PK::LiteralP3, 1usize)]),
        TK::Then => Vec::from(&[Reduce(PK::LiteralP3, 1usize)]),
        TK::Else => Vec::from(&[Reduce(PK::LiteralP3, 1usize)]),
        TK::Arrow => Vec::from(&[Reduce(PK::LiteralP3, 1usize)]),
        TK::BeginCurly => Vec::from(&[Reduce(PK::LiteralP3, 1usize)]),
        TK::EndCurly => Vec::from(&[Reduce(PK::LiteralP3, 1usize)]),
        TK::SemiColon => Vec::from(&[Reduce(PK::LiteralP3, 1usize)]),
        _ => vec![],
    }
}
fn action_false_s8(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::LiteralP4, 1usize)]),
        TK::LogicAnd => Vec::from(&[Reduce(PK::LiteralP4, 1usize)]),
        TK::LogicOr => Vec::from(&[Reduce(PK::LiteralP4, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::LiteralP4, 1usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::LiteralP4, 1usize)]),
        TK::Minus => Vec::from(&[Reduce(PK::LiteralP4, 1usize)]),
        TK::Mul => Vec::from(&[Reduce(PK::LiteralP4, 1usize)]),
        TK::Mod => Vec::from(&[Reduce(PK::LiteralP4, 1usize)]),
        TK::Div => Vec::from(&[Reduce(PK::LiteralP4, 1usize)]),
        TK::Exp => Vec::from(&[Reduce(PK::LiteralP4, 1usize)]),
        TK::EndParen => Vec::from(&[Reduce(PK::LiteralP4, 1usize)]),
        TK::LessThan => Vec::from(&[Reduce(PK::LiteralP4, 1usize)]),
        TK::GreaterThan => Vec::from(&[Reduce(PK::LiteralP4, 1usize)]),
        TK::LessThanEq => Vec::from(&[Reduce(PK::LiteralP4, 1usize)]),
        TK::GreaterThanEq => Vec::from(&[Reduce(PK::LiteralP4, 1usize)]),
        TK::EqualTo => Vec::from(&[Reduce(PK::LiteralP4, 1usize)]),
        TK::NotEqualTo => Vec::from(&[Reduce(PK::LiteralP4, 1usize)]),
        TK::Then => Vec::from(&[Reduce(PK::LiteralP4, 1usize)]),
        TK::Else => Vec::from(&[Reduce(PK::LiteralP4, 1usize)]),
        TK::Arrow => Vec::from(&[Reduce(PK::LiteralP4, 1usize)]),
        TK::BeginCurly => Vec::from(&[Reduce(PK::LiteralP4, 1usize)]),
        TK::EndCurly => Vec::from(&[Reduce(PK::LiteralP4, 1usize)]),
        TK::SemiColon => Vec::from(&[Reduce(PK::LiteralP4, 1usize)]),
        _ => vec![],
    }
}
fn action_if_s9(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Number => Vec::from(&[Shift(State::NumberS1)]),
        TK::Symbol => Vec::from(&[Shift(State::SymbolS2)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS3)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS4)]),
        TK::BeginParen => Vec::from(&[Shift(State::BeginParenS5)]),
        TK::Not => Vec::from(&[Shift(State::NotS6)]),
        TK::True => Vec::from(&[Shift(State::TrueS7)]),
        TK::False => Vec::from(&[Shift(State::FalseS8)]),
        TK::BeginCurly => Vec::from(&[Shift(State::BeginCurlyS11)]),
        _ => vec![],
    }
}
fn action_match_s10(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Number => Vec::from(&[Shift(State::NumberS1)]),
        TK::Symbol => Vec::from(&[Shift(State::SymbolS2)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS3)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS4)]),
        TK::BeginParen => Vec::from(&[Shift(State::BeginParenS5)]),
        TK::Not => Vec::from(&[Shift(State::NotS6)]),
        TK::True => Vec::from(&[Shift(State::TrueS7)]),
        TK::False => Vec::from(&[Shift(State::FalseS8)]),
        TK::BeginCurly => Vec::from(&[Shift(State::BeginCurlyS11)]),
        _ => vec![],
    }
}
fn action_begincurly_s11(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Number => Vec::from(&[Shift(State::NumberS1)]),
        TK::Symbol => Vec::from(&[Shift(State::SymbolS2)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS3)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS4)]),
        TK::BeginParen => Vec::from(&[Shift(State::BeginParenS5)]),
        TK::Not => Vec::from(&[Shift(State::NotS6)]),
        TK::True => Vec::from(&[Shift(State::TrueS7)]),
        TK::False => Vec::from(&[Shift(State::FalseS8)]),
        TK::If => Vec::from(&[Shift(State::IfS9)]),
        TK::Match => Vec::from(&[Shift(State::MatchS10)]),
        TK::BeginCurly => Vec::from(&[Shift(State::BeginCurlyS11)]),
        _ => vec![],
    }
}
fn action_expr_s12(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Accept]),
        _ => vec![],
    }
}
fn action_sequenceexpr_s13(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::ExprP1, 1usize)]),
        _ => vec![],
    }
}
fn action_tupleexpr1_s14(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::SequenceExprP1, 1usize)]),
        TK::EndCurly => Vec::from(&[Reduce(PK::SequenceExprP1, 1usize)]),
        TK::SemiColon => Vec::from(&[Shift(State::SemiColonS28)]),
        _ => vec![],
    }
}
fn action_tupleexpr_s15(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::TupleExpr1P2, 1usize)]),
        TK::EndCurly => Vec::from(&[Reduce(PK::TupleExpr1P2, 1usize)]),
        TK::SemiColon => Vec::from(&[Reduce(PK::TupleExpr1P2, 1usize)]),
        _ => vec![],
    }
}
fn action_conditionalexpr1_s16(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::TupleExprP1, 1usize)]),
        TK::Comma => Vec::from(&[Shift(State::CommaS29)]),
        TK::EndParen => Vec::from(&[Reduce(PK::TupleExprP1, 1usize)]),
        TK::EndCurly => Vec::from(&[Reduce(PK::TupleExprP1, 1usize)]),
        TK::SemiColon => Vec::from(&[Reduce(PK::TupleExprP1, 1usize)]),
        _ => vec![],
    }
}
fn action_conditionalexpr_s17(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::ConditionalExpr1P2, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::ConditionalExpr1P2, 1usize)]),
        TK::EndParen => Vec::from(&[Reduce(PK::ConditionalExpr1P2, 1usize)]),
        TK::EndCurly => Vec::from(&[Reduce(PK::ConditionalExpr1P2, 1usize)]),
        TK::SemiColon => Vec::from(&[Reduce(PK::ConditionalExpr1P2, 1usize)]),
        _ => vec![],
    }
}
fn action_binaryexpr_s18(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::ConditionalExprP1, 1usize)]),
        TK::LogicAnd => Vec::from(&[Shift(State::LogicAndS30)]),
        TK::LogicOr => Vec::from(&[Shift(State::LogicOrS31)]),
        TK::Comma => Vec::from(&[Reduce(PK::ConditionalExprP1, 1usize)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS32)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS33)]),
        TK::Mul => Vec::from(&[Shift(State::MulS34)]),
        TK::Mod => Vec::from(&[Shift(State::ModS35)]),
        TK::Div => Vec::from(&[Shift(State::DivS36)]),
        TK::Exp => Vec::from(&[Shift(State::ExpS37)]),
        TK::EndParen => Vec::from(&[Reduce(PK::ConditionalExprP1, 1usize)]),
        TK::LessThan => Vec::from(&[Shift(State::LessThanS38)]),
        TK::GreaterThan => Vec::from(&[Shift(State::GreaterThanS39)]),
        TK::LessThanEq => Vec::from(&[Shift(State::LessThanEqS40)]),
        TK::GreaterThanEq => Vec::from(&[Shift(State::GreaterThanEqS41)]),
        TK::EqualTo => Vec::from(&[Shift(State::EqualToS42)]),
        TK::NotEqualTo => Vec::from(&[Shift(State::NotEqualToS43)]),
        TK::EndCurly => Vec::from(&[Reduce(PK::ConditionalExprP1, 1usize)]),
        TK::SemiColon => Vec::from(&[Reduce(PK::ConditionalExprP1, 1usize)]),
        _ => vec![],
    }
}
fn action_unaryexpr_s19(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::BinaryExprP1, 1usize)]),
        TK::LogicAnd => Vec::from(&[Reduce(PK::BinaryExprP1, 1usize)]),
        TK::LogicOr => Vec::from(&[Reduce(PK::BinaryExprP1, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::BinaryExprP1, 1usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::BinaryExprP1, 1usize)]),
        TK::Minus => Vec::from(&[Reduce(PK::BinaryExprP1, 1usize)]),
        TK::Mul => Vec::from(&[Reduce(PK::BinaryExprP1, 1usize)]),
        TK::Mod => Vec::from(&[Reduce(PK::BinaryExprP1, 1usize)]),
        TK::Div => Vec::from(&[Reduce(PK::BinaryExprP1, 1usize)]),
        TK::Exp => Vec::from(&[Reduce(PK::BinaryExprP1, 1usize)]),
        TK::EndParen => Vec::from(&[Reduce(PK::BinaryExprP1, 1usize)]),
        TK::LessThan => Vec::from(&[Reduce(PK::BinaryExprP1, 1usize)]),
        TK::GreaterThan => Vec::from(&[Reduce(PK::BinaryExprP1, 1usize)]),
        TK::LessThanEq => Vec::from(&[Reduce(PK::BinaryExprP1, 1usize)]),
        TK::GreaterThanEq => Vec::from(&[Reduce(PK::BinaryExprP1, 1usize)]),
        TK::EqualTo => Vec::from(&[Reduce(PK::BinaryExprP1, 1usize)]),
        TK::NotEqualTo => Vec::from(&[Reduce(PK::BinaryExprP1, 1usize)]),
        TK::Then => Vec::from(&[Reduce(PK::BinaryExprP1, 1usize)]),
        TK::Else => Vec::from(&[Reduce(PK::BinaryExprP1, 1usize)]),
        TK::BeginCurly => Vec::from(&[Reduce(PK::BinaryExprP1, 1usize)]),
        TK::EndCurly => Vec::from(&[Reduce(PK::BinaryExprP1, 1usize)]),
        TK::SemiColon => Vec::from(&[Reduce(PK::BinaryExprP1, 1usize)]),
        _ => vec![],
    }
}
fn action_literal_s20(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::UnaryExprP1, 1usize)]),
        TK::LogicAnd => Vec::from(&[Reduce(PK::UnaryExprP1, 1usize)]),
        TK::LogicOr => Vec::from(&[Reduce(PK::UnaryExprP1, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::UnaryExprP1, 1usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::UnaryExprP1, 1usize)]),
        TK::Minus => Vec::from(&[Reduce(PK::UnaryExprP1, 1usize)]),
        TK::Mul => Vec::from(&[Reduce(PK::UnaryExprP1, 1usize)]),
        TK::Mod => Vec::from(&[Reduce(PK::UnaryExprP1, 1usize)]),
        TK::Div => Vec::from(&[Reduce(PK::UnaryExprP1, 1usize)]),
        TK::Exp => Vec::from(&[Reduce(PK::UnaryExprP1, 1usize)]),
        TK::EndParen => Vec::from(&[Reduce(PK::UnaryExprP1, 1usize)]),
        TK::LessThan => Vec::from(&[Reduce(PK::UnaryExprP1, 1usize)]),
        TK::GreaterThan => Vec::from(&[Reduce(PK::UnaryExprP1, 1usize)]),
        TK::LessThanEq => Vec::from(&[Reduce(PK::UnaryExprP1, 1usize)]),
        TK::GreaterThanEq => Vec::from(&[Reduce(PK::UnaryExprP1, 1usize)]),
        TK::EqualTo => Vec::from(&[Reduce(PK::UnaryExprP1, 1usize)]),
        TK::NotEqualTo => Vec::from(&[Reduce(PK::UnaryExprP1, 1usize)]),
        TK::Then => Vec::from(&[Reduce(PK::UnaryExprP1, 1usize)]),
        TK::Else => Vec::from(&[Reduce(PK::UnaryExprP1, 1usize)]),
        TK::BeginCurly => Vec::from(&[Reduce(PK::UnaryExprP1, 1usize)]),
        TK::EndCurly => Vec::from(&[Reduce(PK::UnaryExprP1, 1usize)]),
        TK::SemiColon => Vec::from(&[Reduce(PK::UnaryExprP1, 1usize)]),
        _ => vec![],
    }
}
fn action_unaryexpr_s21(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::UnaryExprUplusExpr, 2usize)]),
        TK::LogicAnd => Vec::from(&[Reduce(PK::UnaryExprUplusExpr, 2usize)]),
        TK::LogicOr => Vec::from(&[Reduce(PK::UnaryExprUplusExpr, 2usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::UnaryExprUplusExpr, 2usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::UnaryExprUplusExpr, 2usize)]),
        TK::Minus => Vec::from(&[Reduce(PK::UnaryExprUplusExpr, 2usize)]),
        TK::Mul => Vec::from(&[Reduce(PK::UnaryExprUplusExpr, 2usize)]),
        TK::Mod => Vec::from(&[Reduce(PK::UnaryExprUplusExpr, 2usize)]),
        TK::Div => Vec::from(&[Reduce(PK::UnaryExprUplusExpr, 2usize)]),
        TK::Exp => Vec::from(&[Reduce(PK::UnaryExprUplusExpr, 2usize)]),
        TK::EndParen => Vec::from(&[Reduce(PK::UnaryExprUplusExpr, 2usize)]),
        TK::LessThan => Vec::from(&[Reduce(PK::UnaryExprUplusExpr, 2usize)]),
        TK::GreaterThan => Vec::from(&[Reduce(PK::UnaryExprUplusExpr, 2usize)]),
        TK::LessThanEq => Vec::from(&[Reduce(PK::UnaryExprUplusExpr, 2usize)]),
        TK::GreaterThanEq => Vec::from(&[Reduce(PK::UnaryExprUplusExpr, 2usize)]),
        TK::EqualTo => Vec::from(&[Reduce(PK::UnaryExprUplusExpr, 2usize)]),
        TK::NotEqualTo => Vec::from(&[Reduce(PK::UnaryExprUplusExpr, 2usize)]),
        TK::Then => Vec::from(&[Reduce(PK::UnaryExprUplusExpr, 2usize)]),
        TK::Else => Vec::from(&[Reduce(PK::UnaryExprUplusExpr, 2usize)]),
        TK::BeginCurly => Vec::from(&[Reduce(PK::UnaryExprUplusExpr, 2usize)]),
        TK::EndCurly => Vec::from(&[Reduce(PK::UnaryExprUplusExpr, 2usize)]),
        TK::SemiColon => Vec::from(&[Reduce(PK::UnaryExprUplusExpr, 2usize)]),
        _ => vec![],
    }
}
fn action_unaryexpr_s22(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::UnaryExprUminusExpr, 2usize)]),
        TK::LogicAnd => Vec::from(&[Reduce(PK::UnaryExprUminusExpr, 2usize)]),
        TK::LogicOr => Vec::from(&[Reduce(PK::UnaryExprUminusExpr, 2usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::UnaryExprUminusExpr, 2usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::UnaryExprUminusExpr, 2usize)]),
        TK::Minus => Vec::from(&[Reduce(PK::UnaryExprUminusExpr, 2usize)]),
        TK::Mul => Vec::from(&[Reduce(PK::UnaryExprUminusExpr, 2usize)]),
        TK::Mod => Vec::from(&[Reduce(PK::UnaryExprUminusExpr, 2usize)]),
        TK::Div => Vec::from(&[Reduce(PK::UnaryExprUminusExpr, 2usize)]),
        TK::Exp => Vec::from(&[Reduce(PK::UnaryExprUminusExpr, 2usize)]),
        TK::EndParen => Vec::from(&[Reduce(PK::UnaryExprUminusExpr, 2usize)]),
        TK::LessThan => Vec::from(&[Reduce(PK::UnaryExprUminusExpr, 2usize)]),
        TK::GreaterThan => Vec::from(&[Reduce(PK::UnaryExprUminusExpr, 2usize)]),
        TK::LessThanEq => Vec::from(&[Reduce(PK::UnaryExprUminusExpr, 2usize)]),
        TK::GreaterThanEq => Vec::from(&[Reduce(PK::UnaryExprUminusExpr, 2usize)]),
        TK::EqualTo => Vec::from(&[Reduce(PK::UnaryExprUminusExpr, 2usize)]),
        TK::NotEqualTo => Vec::from(&[Reduce(PK::UnaryExprUminusExpr, 2usize)]),
        TK::Then => Vec::from(&[Reduce(PK::UnaryExprUminusExpr, 2usize)]),
        TK::Else => Vec::from(&[Reduce(PK::UnaryExprUminusExpr, 2usize)]),
        TK::BeginCurly => Vec::from(&[Reduce(PK::UnaryExprUminusExpr, 2usize)]),
        TK::EndCurly => Vec::from(&[Reduce(PK::UnaryExprUminusExpr, 2usize)]),
        TK::SemiColon => Vec::from(&[Reduce(PK::UnaryExprUminusExpr, 2usize)]),
        _ => vec![],
    }
}
fn action_tupleexpr_s23(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::EndParen => Vec::from(&[Shift(State::EndParenS44)]),
        _ => vec![],
    }
}
fn action_unaryexpr_s24(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::UnaryExprNotExpr, 2usize)]),
        TK::LogicAnd => Vec::from(&[Reduce(PK::UnaryExprNotExpr, 2usize)]),
        TK::LogicOr => Vec::from(&[Reduce(PK::UnaryExprNotExpr, 2usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::UnaryExprNotExpr, 2usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::UnaryExprNotExpr, 2usize)]),
        TK::Minus => Vec::from(&[Reduce(PK::UnaryExprNotExpr, 2usize)]),
        TK::Mul => Vec::from(&[Reduce(PK::UnaryExprNotExpr, 2usize)]),
        TK::Mod => Vec::from(&[Reduce(PK::UnaryExprNotExpr, 2usize)]),
        TK::Div => Vec::from(&[Reduce(PK::UnaryExprNotExpr, 2usize)]),
        TK::Exp => Vec::from(&[Reduce(PK::UnaryExprNotExpr, 2usize)]),
        TK::EndParen => Vec::from(&[Reduce(PK::UnaryExprNotExpr, 2usize)]),
        TK::LessThan => Vec::from(&[Reduce(PK::UnaryExprNotExpr, 2usize)]),
        TK::GreaterThan => Vec::from(&[Reduce(PK::UnaryExprNotExpr, 2usize)]),
        TK::LessThanEq => Vec::from(&[Reduce(PK::UnaryExprNotExpr, 2usize)]),
        TK::GreaterThanEq => Vec::from(&[Reduce(PK::UnaryExprNotExpr, 2usize)]),
        TK::EqualTo => Vec::from(&[Reduce(PK::UnaryExprNotExpr, 2usize)]),
        TK::NotEqualTo => Vec::from(&[Reduce(PK::UnaryExprNotExpr, 2usize)]),
        TK::Then => Vec::from(&[Reduce(PK::UnaryExprNotExpr, 2usize)]),
        TK::Else => Vec::from(&[Reduce(PK::UnaryExprNotExpr, 2usize)]),
        TK::BeginCurly => Vec::from(&[Reduce(PK::UnaryExprNotExpr, 2usize)]),
        TK::EndCurly => Vec::from(&[Reduce(PK::UnaryExprNotExpr, 2usize)]),
        TK::SemiColon => Vec::from(&[Reduce(PK::UnaryExprNotExpr, 2usize)]),
        _ => vec![],
    }
}
fn action_binaryexpr_s25(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::LogicAnd => Vec::from(&[Shift(State::LogicAndS30)]),
        TK::LogicOr => Vec::from(&[Shift(State::LogicOrS31)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS32)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS33)]),
        TK::Mul => Vec::from(&[Shift(State::MulS34)]),
        TK::Mod => Vec::from(&[Shift(State::ModS35)]),
        TK::Div => Vec::from(&[Shift(State::DivS36)]),
        TK::Exp => Vec::from(&[Shift(State::ExpS37)]),
        TK::LessThan => Vec::from(&[Shift(State::LessThanS38)]),
        TK::GreaterThan => Vec::from(&[Shift(State::GreaterThanS39)]),
        TK::LessThanEq => Vec::from(&[Shift(State::LessThanEqS40)]),
        TK::GreaterThanEq => Vec::from(&[Shift(State::GreaterThanEqS41)]),
        TK::EqualTo => Vec::from(&[Shift(State::EqualToS42)]),
        TK::NotEqualTo => Vec::from(&[Shift(State::NotEqualToS43)]),
        TK::Then => Vec::from(&[Shift(State::ThenS45)]),
        _ => vec![],
    }
}
fn action_binaryexpr_s26(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::LogicAnd => Vec::from(&[Shift(State::LogicAndS30)]),
        TK::LogicOr => Vec::from(&[Shift(State::LogicOrS31)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS32)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS33)]),
        TK::Mul => Vec::from(&[Shift(State::MulS34)]),
        TK::Mod => Vec::from(&[Shift(State::ModS35)]),
        TK::Div => Vec::from(&[Shift(State::DivS36)]),
        TK::Exp => Vec::from(&[Shift(State::ExpS37)]),
        TK::LessThan => Vec::from(&[Shift(State::LessThanS38)]),
        TK::GreaterThan => Vec::from(&[Shift(State::GreaterThanS39)]),
        TK::LessThanEq => Vec::from(&[Shift(State::LessThanEqS40)]),
        TK::GreaterThanEq => Vec::from(&[Shift(State::GreaterThanEqS41)]),
        TK::EqualTo => Vec::from(&[Shift(State::EqualToS42)]),
        TK::NotEqualTo => Vec::from(&[Shift(State::NotEqualToS43)]),
        TK::BeginCurly => Vec::from(&[Shift(State::BeginCurlyS46)]),
        _ => vec![],
    }
}
fn action_sequenceexpr_s27(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::EndCurly => Vec::from(&[Shift(State::EndCurlyS47)]),
        _ => vec![],
    }
}
fn action_semicolon_s28(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Number => Vec::from(&[Shift(State::NumberS1)]),
        TK::Symbol => Vec::from(&[Shift(State::SymbolS2)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS3)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS4)]),
        TK::BeginParen => Vec::from(&[Shift(State::BeginParenS5)]),
        TK::Not => Vec::from(&[Shift(State::NotS6)]),
        TK::True => Vec::from(&[Shift(State::TrueS7)]),
        TK::False => Vec::from(&[Shift(State::FalseS8)]),
        TK::If => Vec::from(&[Shift(State::IfS9)]),
        TK::Match => Vec::from(&[Shift(State::MatchS10)]),
        TK::BeginCurly => Vec::from(&[Shift(State::BeginCurlyS11)]),
        _ => vec![],
    }
}
fn action_comma_s29(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Number => Vec::from(&[Shift(State::NumberS1)]),
        TK::Symbol => Vec::from(&[Shift(State::SymbolS2)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS3)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS4)]),
        TK::BeginParen => Vec::from(&[Shift(State::BeginParenS5)]),
        TK::Not => Vec::from(&[Shift(State::NotS6)]),
        TK::True => Vec::from(&[Shift(State::TrueS7)]),
        TK::False => Vec::from(&[Shift(State::FalseS8)]),
        TK::If => Vec::from(&[Shift(State::IfS9)]),
        TK::Match => Vec::from(&[Shift(State::MatchS10)]),
        TK::BeginCurly => Vec::from(&[Shift(State::BeginCurlyS11)]),
        _ => vec![],
    }
}
fn action_logicand_s30(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Number => Vec::from(&[Shift(State::NumberS1)]),
        TK::Symbol => Vec::from(&[Shift(State::SymbolS2)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS3)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS4)]),
        TK::BeginParen => Vec::from(&[Shift(State::BeginParenS5)]),
        TK::Not => Vec::from(&[Shift(State::NotS6)]),
        TK::True => Vec::from(&[Shift(State::TrueS7)]),
        TK::False => Vec::from(&[Shift(State::FalseS8)]),
        TK::BeginCurly => Vec::from(&[Shift(State::BeginCurlyS11)]),
        _ => vec![],
    }
}
fn action_logicor_s31(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Number => Vec::from(&[Shift(State::NumberS1)]),
        TK::Symbol => Vec::from(&[Shift(State::SymbolS2)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS3)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS4)]),
        TK::BeginParen => Vec::from(&[Shift(State::BeginParenS5)]),
        TK::Not => Vec::from(&[Shift(State::NotS6)]),
        TK::True => Vec::from(&[Shift(State::TrueS7)]),
        TK::False => Vec::from(&[Shift(State::FalseS8)]),
        TK::BeginCurly => Vec::from(&[Shift(State::BeginCurlyS11)]),
        _ => vec![],
    }
}
fn action_plus_s32(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Number => Vec::from(&[Shift(State::NumberS1)]),
        TK::Symbol => Vec::from(&[Shift(State::SymbolS2)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS3)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS4)]),
        TK::BeginParen => Vec::from(&[Shift(State::BeginParenS5)]),
        TK::Not => Vec::from(&[Shift(State::NotS6)]),
        TK::True => Vec::from(&[Shift(State::TrueS7)]),
        TK::False => Vec::from(&[Shift(State::FalseS8)]),
        TK::BeginCurly => Vec::from(&[Shift(State::BeginCurlyS11)]),
        _ => vec![],
    }
}
fn action_minus_s33(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Number => Vec::from(&[Shift(State::NumberS1)]),
        TK::Symbol => Vec::from(&[Shift(State::SymbolS2)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS3)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS4)]),
        TK::BeginParen => Vec::from(&[Shift(State::BeginParenS5)]),
        TK::Not => Vec::from(&[Shift(State::NotS6)]),
        TK::True => Vec::from(&[Shift(State::TrueS7)]),
        TK::False => Vec::from(&[Shift(State::FalseS8)]),
        TK::BeginCurly => Vec::from(&[Shift(State::BeginCurlyS11)]),
        _ => vec![],
    }
}
fn action_mul_s34(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Number => Vec::from(&[Shift(State::NumberS1)]),
        TK::Symbol => Vec::from(&[Shift(State::SymbolS2)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS3)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS4)]),
        TK::BeginParen => Vec::from(&[Shift(State::BeginParenS5)]),
        TK::Not => Vec::from(&[Shift(State::NotS6)]),
        TK::True => Vec::from(&[Shift(State::TrueS7)]),
        TK::False => Vec::from(&[Shift(State::FalseS8)]),
        TK::BeginCurly => Vec::from(&[Shift(State::BeginCurlyS11)]),
        _ => vec![],
    }
}
fn action_mod_s35(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Number => Vec::from(&[Shift(State::NumberS1)]),
        TK::Symbol => Vec::from(&[Shift(State::SymbolS2)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS3)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS4)]),
        TK::BeginParen => Vec::from(&[Shift(State::BeginParenS5)]),
        TK::Not => Vec::from(&[Shift(State::NotS6)]),
        TK::True => Vec::from(&[Shift(State::TrueS7)]),
        TK::False => Vec::from(&[Shift(State::FalseS8)]),
        TK::BeginCurly => Vec::from(&[Shift(State::BeginCurlyS11)]),
        _ => vec![],
    }
}
fn action_div_s36(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Number => Vec::from(&[Shift(State::NumberS1)]),
        TK::Symbol => Vec::from(&[Shift(State::SymbolS2)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS3)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS4)]),
        TK::BeginParen => Vec::from(&[Shift(State::BeginParenS5)]),
        TK::Not => Vec::from(&[Shift(State::NotS6)]),
        TK::True => Vec::from(&[Shift(State::TrueS7)]),
        TK::False => Vec::from(&[Shift(State::FalseS8)]),
        TK::BeginCurly => Vec::from(&[Shift(State::BeginCurlyS11)]),
        _ => vec![],
    }
}
fn action_exp_s37(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Number => Vec::from(&[Shift(State::NumberS1)]),
        TK::Symbol => Vec::from(&[Shift(State::SymbolS2)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS3)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS4)]),
        TK::BeginParen => Vec::from(&[Shift(State::BeginParenS5)]),
        TK::Not => Vec::from(&[Shift(State::NotS6)]),
        TK::True => Vec::from(&[Shift(State::TrueS7)]),
        TK::False => Vec::from(&[Shift(State::FalseS8)]),
        TK::BeginCurly => Vec::from(&[Shift(State::BeginCurlyS11)]),
        _ => vec![],
    }
}
fn action_lessthan_s38(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Number => Vec::from(&[Shift(State::NumberS1)]),
        TK::Symbol => Vec::from(&[Shift(State::SymbolS2)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS3)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS4)]),
        TK::BeginParen => Vec::from(&[Shift(State::BeginParenS5)]),
        TK::Not => Vec::from(&[Shift(State::NotS6)]),
        TK::True => Vec::from(&[Shift(State::TrueS7)]),
        TK::False => Vec::from(&[Shift(State::FalseS8)]),
        TK::BeginCurly => Vec::from(&[Shift(State::BeginCurlyS11)]),
        _ => vec![],
    }
}
fn action_greaterthan_s39(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Number => Vec::from(&[Shift(State::NumberS1)]),
        TK::Symbol => Vec::from(&[Shift(State::SymbolS2)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS3)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS4)]),
        TK::BeginParen => Vec::from(&[Shift(State::BeginParenS5)]),
        TK::Not => Vec::from(&[Shift(State::NotS6)]),
        TK::True => Vec::from(&[Shift(State::TrueS7)]),
        TK::False => Vec::from(&[Shift(State::FalseS8)]),
        TK::BeginCurly => Vec::from(&[Shift(State::BeginCurlyS11)]),
        _ => vec![],
    }
}
fn action_lessthaneq_s40(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Number => Vec::from(&[Shift(State::NumberS1)]),
        TK::Symbol => Vec::from(&[Shift(State::SymbolS2)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS3)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS4)]),
        TK::BeginParen => Vec::from(&[Shift(State::BeginParenS5)]),
        TK::Not => Vec::from(&[Shift(State::NotS6)]),
        TK::True => Vec::from(&[Shift(State::TrueS7)]),
        TK::False => Vec::from(&[Shift(State::FalseS8)]),
        TK::BeginCurly => Vec::from(&[Shift(State::BeginCurlyS11)]),
        _ => vec![],
    }
}
fn action_greaterthaneq_s41(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Number => Vec::from(&[Shift(State::NumberS1)]),
        TK::Symbol => Vec::from(&[Shift(State::SymbolS2)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS3)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS4)]),
        TK::BeginParen => Vec::from(&[Shift(State::BeginParenS5)]),
        TK::Not => Vec::from(&[Shift(State::NotS6)]),
        TK::True => Vec::from(&[Shift(State::TrueS7)]),
        TK::False => Vec::from(&[Shift(State::FalseS8)]),
        TK::BeginCurly => Vec::from(&[Shift(State::BeginCurlyS11)]),
        _ => vec![],
    }
}
fn action_equalto_s42(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Number => Vec::from(&[Shift(State::NumberS1)]),
        TK::Symbol => Vec::from(&[Shift(State::SymbolS2)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS3)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS4)]),
        TK::BeginParen => Vec::from(&[Shift(State::BeginParenS5)]),
        TK::Not => Vec::from(&[Shift(State::NotS6)]),
        TK::True => Vec::from(&[Shift(State::TrueS7)]),
        TK::False => Vec::from(&[Shift(State::FalseS8)]),
        TK::BeginCurly => Vec::from(&[Shift(State::BeginCurlyS11)]),
        _ => vec![],
    }
}
fn action_notequalto_s43(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Number => Vec::from(&[Shift(State::NumberS1)]),
        TK::Symbol => Vec::from(&[Shift(State::SymbolS2)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS3)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS4)]),
        TK::BeginParen => Vec::from(&[Shift(State::BeginParenS5)]),
        TK::Not => Vec::from(&[Shift(State::NotS6)]),
        TK::True => Vec::from(&[Shift(State::TrueS7)]),
        TK::False => Vec::from(&[Shift(State::FalseS8)]),
        TK::BeginCurly => Vec::from(&[Shift(State::BeginCurlyS11)]),
        _ => vec![],
    }
}
fn action_endparen_s44(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::UnaryExprP2, 3usize)]),
        TK::LogicAnd => Vec::from(&[Reduce(PK::UnaryExprP2, 3usize)]),
        TK::LogicOr => Vec::from(&[Reduce(PK::UnaryExprP2, 3usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::UnaryExprP2, 3usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::UnaryExprP2, 3usize)]),
        TK::Minus => Vec::from(&[Reduce(PK::UnaryExprP2, 3usize)]),
        TK::Mul => Vec::from(&[Reduce(PK::UnaryExprP2, 3usize)]),
        TK::Mod => Vec::from(&[Reduce(PK::UnaryExprP2, 3usize)]),
        TK::Div => Vec::from(&[Reduce(PK::UnaryExprP2, 3usize)]),
        TK::Exp => Vec::from(&[Reduce(PK::UnaryExprP2, 3usize)]),
        TK::EndParen => Vec::from(&[Reduce(PK::UnaryExprP2, 3usize)]),
        TK::LessThan => Vec::from(&[Reduce(PK::UnaryExprP2, 3usize)]),
        TK::GreaterThan => Vec::from(&[Reduce(PK::UnaryExprP2, 3usize)]),
        TK::LessThanEq => Vec::from(&[Reduce(PK::UnaryExprP2, 3usize)]),
        TK::GreaterThanEq => Vec::from(&[Reduce(PK::UnaryExprP2, 3usize)]),
        TK::EqualTo => Vec::from(&[Reduce(PK::UnaryExprP2, 3usize)]),
        TK::NotEqualTo => Vec::from(&[Reduce(PK::UnaryExprP2, 3usize)]),
        TK::Then => Vec::from(&[Reduce(PK::UnaryExprP2, 3usize)]),
        TK::Else => Vec::from(&[Reduce(PK::UnaryExprP2, 3usize)]),
        TK::BeginCurly => Vec::from(&[Reduce(PK::UnaryExprP2, 3usize)]),
        TK::EndCurly => Vec::from(&[Reduce(PK::UnaryExprP2, 3usize)]),
        TK::SemiColon => Vec::from(&[Reduce(PK::UnaryExprP2, 3usize)]),
        _ => vec![],
    }
}
fn action_then_s45(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Number => Vec::from(&[Shift(State::NumberS1)]),
        TK::Symbol => Vec::from(&[Shift(State::SymbolS2)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS3)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS4)]),
        TK::BeginParen => Vec::from(&[Shift(State::BeginParenS5)]),
        TK::Not => Vec::from(&[Shift(State::NotS6)]),
        TK::True => Vec::from(&[Shift(State::TrueS7)]),
        TK::False => Vec::from(&[Shift(State::FalseS8)]),
        TK::BeginCurly => Vec::from(&[Shift(State::BeginCurlyS11)]),
        _ => vec![],
    }
}
fn action_begincurly_s46(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Case => Vec::from(&[Shift(State::CaseS65)]),
        _ => vec![],
    }
}
fn action_endcurly_s47(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::UnaryExprP3, 3usize)]),
        TK::LogicAnd => Vec::from(&[Reduce(PK::UnaryExprP3, 3usize)]),
        TK::LogicOr => Vec::from(&[Reduce(PK::UnaryExprP3, 3usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::UnaryExprP3, 3usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::UnaryExprP3, 3usize)]),
        TK::Minus => Vec::from(&[Reduce(PK::UnaryExprP3, 3usize)]),
        TK::Mul => Vec::from(&[Reduce(PK::UnaryExprP3, 3usize)]),
        TK::Mod => Vec::from(&[Reduce(PK::UnaryExprP3, 3usize)]),
        TK::Div => Vec::from(&[Reduce(PK::UnaryExprP3, 3usize)]),
        TK::Exp => Vec::from(&[Reduce(PK::UnaryExprP3, 3usize)]),
        TK::EndParen => Vec::from(&[Reduce(PK::UnaryExprP3, 3usize)]),
        TK::LessThan => Vec::from(&[Reduce(PK::UnaryExprP3, 3usize)]),
        TK::GreaterThan => Vec::from(&[Reduce(PK::UnaryExprP3, 3usize)]),
        TK::LessThanEq => Vec::from(&[Reduce(PK::UnaryExprP3, 3usize)]),
        TK::GreaterThanEq => Vec::from(&[Reduce(PK::UnaryExprP3, 3usize)]),
        TK::EqualTo => Vec::from(&[Reduce(PK::UnaryExprP3, 3usize)]),
        TK::NotEqualTo => Vec::from(&[Reduce(PK::UnaryExprP3, 3usize)]),
        TK::Then => Vec::from(&[Reduce(PK::UnaryExprP3, 3usize)]),
        TK::Else => Vec::from(&[Reduce(PK::UnaryExprP3, 3usize)]),
        TK::BeginCurly => Vec::from(&[Reduce(PK::UnaryExprP3, 3usize)]),
        TK::EndCurly => Vec::from(&[Reduce(PK::UnaryExprP3, 3usize)]),
        TK::SemiColon => Vec::from(&[Reduce(PK::UnaryExprP3, 3usize)]),
        _ => vec![],
    }
}
fn action_tupleexpr_s48(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::TupleExpr1P1, 3usize)]),
        TK::EndCurly => Vec::from(&[Reduce(PK::TupleExpr1P1, 3usize)]),
        TK::SemiColon => Vec::from(&[Reduce(PK::TupleExpr1P1, 3usize)]),
        _ => vec![],
    }
}
fn action_conditionalexpr_s49(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::ConditionalExpr1P1, 3usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::ConditionalExpr1P1, 3usize)]),
        TK::EndParen => Vec::from(&[Reduce(PK::ConditionalExpr1P1, 3usize)]),
        TK::EndCurly => Vec::from(&[Reduce(PK::ConditionalExpr1P1, 3usize)]),
        TK::SemiColon => Vec::from(&[Reduce(PK::ConditionalExpr1P1, 3usize)]),
        _ => vec![],
    }
}
fn action_binaryexpr_s50(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::BinaryExprLogicalAndExpr, 3usize)]),
        TK::LogicAnd => Vec::from(&[Reduce(PK::BinaryExprLogicalAndExpr, 3usize)]),
        TK::LogicOr => Vec::from(&[Reduce(PK::BinaryExprLogicalAndExpr, 3usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::BinaryExprLogicalAndExpr, 3usize)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS32)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS33)]),
        TK::Mul => Vec::from(&[Shift(State::MulS34)]),
        TK::Mod => Vec::from(&[Shift(State::ModS35)]),
        TK::Div => Vec::from(&[Shift(State::DivS36)]),
        TK::Exp => Vec::from(&[Shift(State::ExpS37)]),
        TK::EndParen => Vec::from(&[Reduce(PK::BinaryExprLogicalAndExpr, 3usize)]),
        TK::LessThan => Vec::from(&[Shift(State::LessThanS38)]),
        TK::GreaterThan => Vec::from(&[Shift(State::GreaterThanS39)]),
        TK::LessThanEq => Vec::from(&[Shift(State::LessThanEqS40)]),
        TK::GreaterThanEq => Vec::from(&[Shift(State::GreaterThanEqS41)]),
        TK::EqualTo => Vec::from(&[Shift(State::EqualToS42)]),
        TK::NotEqualTo => Vec::from(&[Shift(State::NotEqualToS43)]),
        TK::Then => Vec::from(&[Reduce(PK::BinaryExprLogicalAndExpr, 3usize)]),
        TK::Else => Vec::from(&[Reduce(PK::BinaryExprLogicalAndExpr, 3usize)]),
        TK::BeginCurly => Vec::from(&[Reduce(PK::BinaryExprLogicalAndExpr, 3usize)]),
        TK::EndCurly => Vec::from(&[Reduce(PK::BinaryExprLogicalAndExpr, 3usize)]),
        TK::SemiColon => Vec::from(&[Reduce(PK::BinaryExprLogicalAndExpr, 3usize)]),
        _ => vec![],
    }
}
fn action_binaryexpr_s51(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::BinaryExprLogicalOrExpr, 3usize)]),
        TK::LogicAnd => Vec::from(&[Shift(State::LogicAndS30)]),
        TK::LogicOr => Vec::from(&[Reduce(PK::BinaryExprLogicalOrExpr, 3usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::BinaryExprLogicalOrExpr, 3usize)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS32)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS33)]),
        TK::Mul => Vec::from(&[Shift(State::MulS34)]),
        TK::Mod => Vec::from(&[Shift(State::ModS35)]),
        TK::Div => Vec::from(&[Shift(State::DivS36)]),
        TK::Exp => Vec::from(&[Shift(State::ExpS37)]),
        TK::EndParen => Vec::from(&[Reduce(PK::BinaryExprLogicalOrExpr, 3usize)]),
        TK::LessThan => Vec::from(&[Shift(State::LessThanS38)]),
        TK::GreaterThan => Vec::from(&[Shift(State::GreaterThanS39)]),
        TK::LessThanEq => Vec::from(&[Shift(State::LessThanEqS40)]),
        TK::GreaterThanEq => Vec::from(&[Shift(State::GreaterThanEqS41)]),
        TK::EqualTo => Vec::from(&[Shift(State::EqualToS42)]),
        TK::NotEqualTo => Vec::from(&[Shift(State::NotEqualToS43)]),
        TK::Then => Vec::from(&[Reduce(PK::BinaryExprLogicalOrExpr, 3usize)]),
        TK::Else => Vec::from(&[Reduce(PK::BinaryExprLogicalOrExpr, 3usize)]),
        TK::BeginCurly => Vec::from(&[Reduce(PK::BinaryExprLogicalOrExpr, 3usize)]),
        TK::EndCurly => Vec::from(&[Reduce(PK::BinaryExprLogicalOrExpr, 3usize)]),
        TK::SemiColon => Vec::from(&[Reduce(PK::BinaryExprLogicalOrExpr, 3usize)]),
        _ => vec![],
    }
}
fn action_binaryexpr_s52(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::BinaryExprAddExpr, 3usize)]),
        TK::LogicAnd => Vec::from(&[Reduce(PK::BinaryExprAddExpr, 3usize)]),
        TK::LogicOr => Vec::from(&[Reduce(PK::BinaryExprAddExpr, 3usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::BinaryExprAddExpr, 3usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::BinaryExprAddExpr, 3usize)]),
        TK::Minus => Vec::from(&[Reduce(PK::BinaryExprAddExpr, 3usize)]),
        TK::Mul => Vec::from(&[Shift(State::MulS34)]),
        TK::Mod => Vec::from(&[Shift(State::ModS35)]),
        TK::Div => Vec::from(&[Shift(State::DivS36)]),
        TK::Exp => Vec::from(&[Shift(State::ExpS37)]),
        TK::EndParen => Vec::from(&[Reduce(PK::BinaryExprAddExpr, 3usize)]),
        TK::LessThan => Vec::from(&[Reduce(PK::BinaryExprAddExpr, 3usize)]),
        TK::GreaterThan => Vec::from(&[Reduce(PK::BinaryExprAddExpr, 3usize)]),
        TK::LessThanEq => Vec::from(&[Reduce(PK::BinaryExprAddExpr, 3usize)]),
        TK::GreaterThanEq => Vec::from(&[Reduce(PK::BinaryExprAddExpr, 3usize)]),
        TK::EqualTo => Vec::from(&[Reduce(PK::BinaryExprAddExpr, 3usize)]),
        TK::NotEqualTo => Vec::from(&[Reduce(PK::BinaryExprAddExpr, 3usize)]),
        TK::Then => Vec::from(&[Reduce(PK::BinaryExprAddExpr, 3usize)]),
        TK::Else => Vec::from(&[Reduce(PK::BinaryExprAddExpr, 3usize)]),
        TK::BeginCurly => Vec::from(&[Reduce(PK::BinaryExprAddExpr, 3usize)]),
        TK::EndCurly => Vec::from(&[Reduce(PK::BinaryExprAddExpr, 3usize)]),
        TK::SemiColon => Vec::from(&[Reduce(PK::BinaryExprAddExpr, 3usize)]),
        _ => vec![],
    }
}
fn action_binaryexpr_s53(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::BinaryExprSubExpr, 3usize)]),
        TK::LogicAnd => Vec::from(&[Reduce(PK::BinaryExprSubExpr, 3usize)]),
        TK::LogicOr => Vec::from(&[Reduce(PK::BinaryExprSubExpr, 3usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::BinaryExprSubExpr, 3usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::BinaryExprSubExpr, 3usize)]),
        TK::Minus => Vec::from(&[Reduce(PK::BinaryExprSubExpr, 3usize)]),
        TK::Mul => Vec::from(&[Shift(State::MulS34)]),
        TK::Mod => Vec::from(&[Shift(State::ModS35)]),
        TK::Div => Vec::from(&[Shift(State::DivS36)]),
        TK::Exp => Vec::from(&[Shift(State::ExpS37)]),
        TK::EndParen => Vec::from(&[Reduce(PK::BinaryExprSubExpr, 3usize)]),
        TK::LessThan => Vec::from(&[Reduce(PK::BinaryExprSubExpr, 3usize)]),
        TK::GreaterThan => Vec::from(&[Reduce(PK::BinaryExprSubExpr, 3usize)]),
        TK::LessThanEq => Vec::from(&[Reduce(PK::BinaryExprSubExpr, 3usize)]),
        TK::GreaterThanEq => Vec::from(&[Reduce(PK::BinaryExprSubExpr, 3usize)]),
        TK::EqualTo => Vec::from(&[Reduce(PK::BinaryExprSubExpr, 3usize)]),
        TK::NotEqualTo => Vec::from(&[Reduce(PK::BinaryExprSubExpr, 3usize)]),
        TK::Then => Vec::from(&[Reduce(PK::BinaryExprSubExpr, 3usize)]),
        TK::Else => Vec::from(&[Reduce(PK::BinaryExprSubExpr, 3usize)]),
        TK::BeginCurly => Vec::from(&[Reduce(PK::BinaryExprSubExpr, 3usize)]),
        TK::EndCurly => Vec::from(&[Reduce(PK::BinaryExprSubExpr, 3usize)]),
        TK::SemiColon => Vec::from(&[Reduce(PK::BinaryExprSubExpr, 3usize)]),
        _ => vec![],
    }
}
fn action_binaryexpr_s54(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::BinaryExprMultExpr, 3usize)]),
        TK::LogicAnd => Vec::from(&[Reduce(PK::BinaryExprMultExpr, 3usize)]),
        TK::LogicOr => Vec::from(&[Reduce(PK::BinaryExprMultExpr, 3usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::BinaryExprMultExpr, 3usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::BinaryExprMultExpr, 3usize)]),
        TK::Minus => Vec::from(&[Reduce(PK::BinaryExprMultExpr, 3usize)]),
        TK::Mul => Vec::from(&[Reduce(PK::BinaryExprMultExpr, 3usize)]),
        TK::Mod => Vec::from(&[Reduce(PK::BinaryExprMultExpr, 3usize)]),
        TK::Div => Vec::from(&[Reduce(PK::BinaryExprMultExpr, 3usize)]),
        TK::Exp => Vec::from(&[Shift(State::ExpS37)]),
        TK::EndParen => Vec::from(&[Reduce(PK::BinaryExprMultExpr, 3usize)]),
        TK::LessThan => Vec::from(&[Reduce(PK::BinaryExprMultExpr, 3usize)]),
        TK::GreaterThan => Vec::from(&[Reduce(PK::BinaryExprMultExpr, 3usize)]),
        TK::LessThanEq => Vec::from(&[Reduce(PK::BinaryExprMultExpr, 3usize)]),
        TK::GreaterThanEq => Vec::from(&[Reduce(PK::BinaryExprMultExpr, 3usize)]),
        TK::EqualTo => Vec::from(&[Reduce(PK::BinaryExprMultExpr, 3usize)]),
        TK::NotEqualTo => Vec::from(&[Reduce(PK::BinaryExprMultExpr, 3usize)]),
        TK::Then => Vec::from(&[Reduce(PK::BinaryExprMultExpr, 3usize)]),
        TK::Else => Vec::from(&[Reduce(PK::BinaryExprMultExpr, 3usize)]),
        TK::BeginCurly => Vec::from(&[Reduce(PK::BinaryExprMultExpr, 3usize)]),
        TK::EndCurly => Vec::from(&[Reduce(PK::BinaryExprMultExpr, 3usize)]),
        TK::SemiColon => Vec::from(&[Reduce(PK::BinaryExprMultExpr, 3usize)]),
        _ => vec![],
    }
}
fn action_binaryexpr_s55(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::BinaryExprModExpr, 3usize)]),
        TK::LogicAnd => Vec::from(&[Reduce(PK::BinaryExprModExpr, 3usize)]),
        TK::LogicOr => Vec::from(&[Reduce(PK::BinaryExprModExpr, 3usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::BinaryExprModExpr, 3usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::BinaryExprModExpr, 3usize)]),
        TK::Minus => Vec::from(&[Reduce(PK::BinaryExprModExpr, 3usize)]),
        TK::Mul => Vec::from(&[Reduce(PK::BinaryExprModExpr, 3usize)]),
        TK::Mod => Vec::from(&[Reduce(PK::BinaryExprModExpr, 3usize)]),
        TK::Div => Vec::from(&[Reduce(PK::BinaryExprModExpr, 3usize)]),
        TK::Exp => Vec::from(&[Shift(State::ExpS37)]),
        TK::EndParen => Vec::from(&[Reduce(PK::BinaryExprModExpr, 3usize)]),
        TK::LessThan => Vec::from(&[Reduce(PK::BinaryExprModExpr, 3usize)]),
        TK::GreaterThan => Vec::from(&[Reduce(PK::BinaryExprModExpr, 3usize)]),
        TK::LessThanEq => Vec::from(&[Reduce(PK::BinaryExprModExpr, 3usize)]),
        TK::GreaterThanEq => Vec::from(&[Reduce(PK::BinaryExprModExpr, 3usize)]),
        TK::EqualTo => Vec::from(&[Reduce(PK::BinaryExprModExpr, 3usize)]),
        TK::NotEqualTo => Vec::from(&[Reduce(PK::BinaryExprModExpr, 3usize)]),
        TK::Then => Vec::from(&[Reduce(PK::BinaryExprModExpr, 3usize)]),
        TK::Else => Vec::from(&[Reduce(PK::BinaryExprModExpr, 3usize)]),
        TK::BeginCurly => Vec::from(&[Reduce(PK::BinaryExprModExpr, 3usize)]),
        TK::EndCurly => Vec::from(&[Reduce(PK::BinaryExprModExpr, 3usize)]),
        TK::SemiColon => Vec::from(&[Reduce(PK::BinaryExprModExpr, 3usize)]),
        _ => vec![],
    }
}
fn action_binaryexpr_s56(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::BinaryExprDivExpr, 3usize)]),
        TK::LogicAnd => Vec::from(&[Reduce(PK::BinaryExprDivExpr, 3usize)]),
        TK::LogicOr => Vec::from(&[Reduce(PK::BinaryExprDivExpr, 3usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::BinaryExprDivExpr, 3usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::BinaryExprDivExpr, 3usize)]),
        TK::Minus => Vec::from(&[Reduce(PK::BinaryExprDivExpr, 3usize)]),
        TK::Mul => Vec::from(&[Reduce(PK::BinaryExprDivExpr, 3usize)]),
        TK::Mod => Vec::from(&[Reduce(PK::BinaryExprDivExpr, 3usize)]),
        TK::Div => Vec::from(&[Reduce(PK::BinaryExprDivExpr, 3usize)]),
        TK::Exp => Vec::from(&[Shift(State::ExpS37)]),
        TK::EndParen => Vec::from(&[Reduce(PK::BinaryExprDivExpr, 3usize)]),
        TK::LessThan => Vec::from(&[Reduce(PK::BinaryExprDivExpr, 3usize)]),
        TK::GreaterThan => Vec::from(&[Reduce(PK::BinaryExprDivExpr, 3usize)]),
        TK::LessThanEq => Vec::from(&[Reduce(PK::BinaryExprDivExpr, 3usize)]),
        TK::GreaterThanEq => Vec::from(&[Reduce(PK::BinaryExprDivExpr, 3usize)]),
        TK::EqualTo => Vec::from(&[Reduce(PK::BinaryExprDivExpr, 3usize)]),
        TK::NotEqualTo => Vec::from(&[Reduce(PK::BinaryExprDivExpr, 3usize)]),
        TK::Then => Vec::from(&[Reduce(PK::BinaryExprDivExpr, 3usize)]),
        TK::Else => Vec::from(&[Reduce(PK::BinaryExprDivExpr, 3usize)]),
        TK::BeginCurly => Vec::from(&[Reduce(PK::BinaryExprDivExpr, 3usize)]),
        TK::EndCurly => Vec::from(&[Reduce(PK::BinaryExprDivExpr, 3usize)]),
        TK::SemiColon => Vec::from(&[Reduce(PK::BinaryExprDivExpr, 3usize)]),
        _ => vec![],
    }
}
fn action_binaryexpr_s57(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::BinaryExprExpExpr, 3usize)]),
        TK::LogicAnd => Vec::from(&[Reduce(PK::BinaryExprExpExpr, 3usize)]),
        TK::LogicOr => Vec::from(&[Reduce(PK::BinaryExprExpExpr, 3usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::BinaryExprExpExpr, 3usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::BinaryExprExpExpr, 3usize)]),
        TK::Minus => Vec::from(&[Reduce(PK::BinaryExprExpExpr, 3usize)]),
        TK::Mul => Vec::from(&[Reduce(PK::BinaryExprExpExpr, 3usize)]),
        TK::Mod => Vec::from(&[Reduce(PK::BinaryExprExpExpr, 3usize)]),
        TK::Div => Vec::from(&[Reduce(PK::BinaryExprExpExpr, 3usize)]),
        TK::Exp => Vec::from(&[Shift(State::ExpS37)]),
        TK::EndParen => Vec::from(&[Reduce(PK::BinaryExprExpExpr, 3usize)]),
        TK::LessThan => Vec::from(&[Reduce(PK::BinaryExprExpExpr, 3usize)]),
        TK::GreaterThan => Vec::from(&[Reduce(PK::BinaryExprExpExpr, 3usize)]),
        TK::LessThanEq => Vec::from(&[Reduce(PK::BinaryExprExpExpr, 3usize)]),
        TK::GreaterThanEq => Vec::from(&[Reduce(PK::BinaryExprExpExpr, 3usize)]),
        TK::EqualTo => Vec::from(&[Reduce(PK::BinaryExprExpExpr, 3usize)]),
        TK::NotEqualTo => Vec::from(&[Reduce(PK::BinaryExprExpExpr, 3usize)]),
        TK::Then => Vec::from(&[Reduce(PK::BinaryExprExpExpr, 3usize)]),
        TK::Else => Vec::from(&[Reduce(PK::BinaryExprExpExpr, 3usize)]),
        TK::BeginCurly => Vec::from(&[Reduce(PK::BinaryExprExpExpr, 3usize)]),
        TK::EndCurly => Vec::from(&[Reduce(PK::BinaryExprExpExpr, 3usize)]),
        TK::SemiColon => Vec::from(&[Reduce(PK::BinaryExprExpExpr, 3usize)]),
        _ => vec![],
    }
}
fn action_binaryexpr_s58(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::BinaryExprLTExpr, 3usize)]),
        TK::LogicAnd => Vec::from(&[Reduce(PK::BinaryExprLTExpr, 3usize)]),
        TK::LogicOr => Vec::from(&[Reduce(PK::BinaryExprLTExpr, 3usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::BinaryExprLTExpr, 3usize)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS32)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS33)]),
        TK::Mul => Vec::from(&[Shift(State::MulS34)]),
        TK::Mod => Vec::from(&[Shift(State::ModS35)]),
        TK::Div => Vec::from(&[Shift(State::DivS36)]),
        TK::Exp => Vec::from(&[Shift(State::ExpS37)]),
        TK::EndParen => Vec::from(&[Reduce(PK::BinaryExprLTExpr, 3usize)]),
        TK::LessThan => Vec::from(&[Reduce(PK::BinaryExprLTExpr, 3usize)]),
        TK::GreaterThan => Vec::from(&[Reduce(PK::BinaryExprLTExpr, 3usize)]),
        TK::LessThanEq => Vec::from(&[Reduce(PK::BinaryExprLTExpr, 3usize)]),
        TK::GreaterThanEq => Vec::from(&[Reduce(PK::BinaryExprLTExpr, 3usize)]),
        TK::EqualTo => Vec::from(&[Reduce(PK::BinaryExprLTExpr, 3usize)]),
        TK::NotEqualTo => Vec::from(&[Reduce(PK::BinaryExprLTExpr, 3usize)]),
        TK::Then => Vec::from(&[Reduce(PK::BinaryExprLTExpr, 3usize)]),
        TK::Else => Vec::from(&[Reduce(PK::BinaryExprLTExpr, 3usize)]),
        TK::BeginCurly => Vec::from(&[Reduce(PK::BinaryExprLTExpr, 3usize)]),
        TK::EndCurly => Vec::from(&[Reduce(PK::BinaryExprLTExpr, 3usize)]),
        TK::SemiColon => Vec::from(&[Reduce(PK::BinaryExprLTExpr, 3usize)]),
        _ => vec![],
    }
}
fn action_binaryexpr_s59(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::BinaryExprGTExpr, 3usize)]),
        TK::LogicAnd => Vec::from(&[Reduce(PK::BinaryExprGTExpr, 3usize)]),
        TK::LogicOr => Vec::from(&[Reduce(PK::BinaryExprGTExpr, 3usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::BinaryExprGTExpr, 3usize)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS32)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS33)]),
        TK::Mul => Vec::from(&[Shift(State::MulS34)]),
        TK::Mod => Vec::from(&[Shift(State::ModS35)]),
        TK::Div => Vec::from(&[Shift(State::DivS36)]),
        TK::Exp => Vec::from(&[Shift(State::ExpS37)]),
        TK::EndParen => Vec::from(&[Reduce(PK::BinaryExprGTExpr, 3usize)]),
        TK::LessThan => Vec::from(&[Reduce(PK::BinaryExprGTExpr, 3usize)]),
        TK::GreaterThan => Vec::from(&[Reduce(PK::BinaryExprGTExpr, 3usize)]),
        TK::LessThanEq => Vec::from(&[Reduce(PK::BinaryExprGTExpr, 3usize)]),
        TK::GreaterThanEq => Vec::from(&[Reduce(PK::BinaryExprGTExpr, 3usize)]),
        TK::EqualTo => Vec::from(&[Reduce(PK::BinaryExprGTExpr, 3usize)]),
        TK::NotEqualTo => Vec::from(&[Reduce(PK::BinaryExprGTExpr, 3usize)]),
        TK::Then => Vec::from(&[Reduce(PK::BinaryExprGTExpr, 3usize)]),
        TK::Else => Vec::from(&[Reduce(PK::BinaryExprGTExpr, 3usize)]),
        TK::BeginCurly => Vec::from(&[Reduce(PK::BinaryExprGTExpr, 3usize)]),
        TK::EndCurly => Vec::from(&[Reduce(PK::BinaryExprGTExpr, 3usize)]),
        TK::SemiColon => Vec::from(&[Reduce(PK::BinaryExprGTExpr, 3usize)]),
        _ => vec![],
    }
}
fn action_binaryexpr_s60(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::BinaryExprLTEqExpr, 3usize)]),
        TK::LogicAnd => Vec::from(&[Reduce(PK::BinaryExprLTEqExpr, 3usize)]),
        TK::LogicOr => Vec::from(&[Reduce(PK::BinaryExprLTEqExpr, 3usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::BinaryExprLTEqExpr, 3usize)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS32)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS33)]),
        TK::Mul => Vec::from(&[Shift(State::MulS34)]),
        TK::Mod => Vec::from(&[Shift(State::ModS35)]),
        TK::Div => Vec::from(&[Shift(State::DivS36)]),
        TK::Exp => Vec::from(&[Shift(State::ExpS37)]),
        TK::EndParen => Vec::from(&[Reduce(PK::BinaryExprLTEqExpr, 3usize)]),
        TK::LessThan => Vec::from(&[Reduce(PK::BinaryExprLTEqExpr, 3usize)]),
        TK::GreaterThan => Vec::from(&[Reduce(PK::BinaryExprLTEqExpr, 3usize)]),
        TK::LessThanEq => Vec::from(&[Reduce(PK::BinaryExprLTEqExpr, 3usize)]),
        TK::GreaterThanEq => Vec::from(&[Reduce(PK::BinaryExprLTEqExpr, 3usize)]),
        TK::EqualTo => Vec::from(&[Reduce(PK::BinaryExprLTEqExpr, 3usize)]),
        TK::NotEqualTo => Vec::from(&[Reduce(PK::BinaryExprLTEqExpr, 3usize)]),
        TK::Then => Vec::from(&[Reduce(PK::BinaryExprLTEqExpr, 3usize)]),
        TK::Else => Vec::from(&[Reduce(PK::BinaryExprLTEqExpr, 3usize)]),
        TK::BeginCurly => Vec::from(&[Reduce(PK::BinaryExprLTEqExpr, 3usize)]),
        TK::EndCurly => Vec::from(&[Reduce(PK::BinaryExprLTEqExpr, 3usize)]),
        TK::SemiColon => Vec::from(&[Reduce(PK::BinaryExprLTEqExpr, 3usize)]),
        _ => vec![],
    }
}
fn action_binaryexpr_s61(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::BinaryExprGTEqExpr, 3usize)]),
        TK::LogicAnd => Vec::from(&[Reduce(PK::BinaryExprGTEqExpr, 3usize)]),
        TK::LogicOr => Vec::from(&[Reduce(PK::BinaryExprGTEqExpr, 3usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::BinaryExprGTEqExpr, 3usize)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS32)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS33)]),
        TK::Mul => Vec::from(&[Shift(State::MulS34)]),
        TK::Mod => Vec::from(&[Shift(State::ModS35)]),
        TK::Div => Vec::from(&[Shift(State::DivS36)]),
        TK::Exp => Vec::from(&[Shift(State::ExpS37)]),
        TK::EndParen => Vec::from(&[Reduce(PK::BinaryExprGTEqExpr, 3usize)]),
        TK::LessThan => Vec::from(&[Reduce(PK::BinaryExprGTEqExpr, 3usize)]),
        TK::GreaterThan => Vec::from(&[Reduce(PK::BinaryExprGTEqExpr, 3usize)]),
        TK::LessThanEq => Vec::from(&[Reduce(PK::BinaryExprGTEqExpr, 3usize)]),
        TK::GreaterThanEq => Vec::from(&[Reduce(PK::BinaryExprGTEqExpr, 3usize)]),
        TK::EqualTo => Vec::from(&[Reduce(PK::BinaryExprGTEqExpr, 3usize)]),
        TK::NotEqualTo => Vec::from(&[Reduce(PK::BinaryExprGTEqExpr, 3usize)]),
        TK::Then => Vec::from(&[Reduce(PK::BinaryExprGTEqExpr, 3usize)]),
        TK::Else => Vec::from(&[Reduce(PK::BinaryExprGTEqExpr, 3usize)]),
        TK::BeginCurly => Vec::from(&[Reduce(PK::BinaryExprGTEqExpr, 3usize)]),
        TK::EndCurly => Vec::from(&[Reduce(PK::BinaryExprGTEqExpr, 3usize)]),
        TK::SemiColon => Vec::from(&[Reduce(PK::BinaryExprGTEqExpr, 3usize)]),
        _ => vec![],
    }
}
fn action_binaryexpr_s62(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::BinaryExprEqExpr, 3usize)]),
        TK::LogicAnd => Vec::from(&[Reduce(PK::BinaryExprEqExpr, 3usize)]),
        TK::LogicOr => Vec::from(&[Reduce(PK::BinaryExprEqExpr, 3usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::BinaryExprEqExpr, 3usize)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS32)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS33)]),
        TK::Mul => Vec::from(&[Shift(State::MulS34)]),
        TK::Mod => Vec::from(&[Shift(State::ModS35)]),
        TK::Div => Vec::from(&[Shift(State::DivS36)]),
        TK::Exp => Vec::from(&[Shift(State::ExpS37)]),
        TK::EndParen => Vec::from(&[Reduce(PK::BinaryExprEqExpr, 3usize)]),
        TK::LessThan => Vec::from(&[Shift(State::LessThanS38)]),
        TK::GreaterThan => Vec::from(&[Shift(State::GreaterThanS39)]),
        TK::LessThanEq => Vec::from(&[Shift(State::LessThanEqS40)]),
        TK::GreaterThanEq => Vec::from(&[Shift(State::GreaterThanEqS41)]),
        TK::EqualTo => Vec::from(&[Reduce(PK::BinaryExprEqExpr, 3usize)]),
        TK::NotEqualTo => Vec::from(&[Reduce(PK::BinaryExprEqExpr, 3usize)]),
        TK::Then => Vec::from(&[Reduce(PK::BinaryExprEqExpr, 3usize)]),
        TK::Else => Vec::from(&[Reduce(PK::BinaryExprEqExpr, 3usize)]),
        TK::BeginCurly => Vec::from(&[Reduce(PK::BinaryExprEqExpr, 3usize)]),
        TK::EndCurly => Vec::from(&[Reduce(PK::BinaryExprEqExpr, 3usize)]),
        TK::SemiColon => Vec::from(&[Reduce(PK::BinaryExprEqExpr, 3usize)]),
        _ => vec![],
    }
}
fn action_binaryexpr_s63(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::BinaryExprNotEqExpr, 3usize)]),
        TK::LogicAnd => Vec::from(&[Reduce(PK::BinaryExprNotEqExpr, 3usize)]),
        TK::LogicOr => Vec::from(&[Reduce(PK::BinaryExprNotEqExpr, 3usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::BinaryExprNotEqExpr, 3usize)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS32)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS33)]),
        TK::Mul => Vec::from(&[Shift(State::MulS34)]),
        TK::Mod => Vec::from(&[Shift(State::ModS35)]),
        TK::Div => Vec::from(&[Shift(State::DivS36)]),
        TK::Exp => Vec::from(&[Shift(State::ExpS37)]),
        TK::EndParen => Vec::from(&[Reduce(PK::BinaryExprNotEqExpr, 3usize)]),
        TK::LessThan => Vec::from(&[Shift(State::LessThanS38)]),
        TK::GreaterThan => Vec::from(&[Shift(State::GreaterThanS39)]),
        TK::LessThanEq => Vec::from(&[Shift(State::LessThanEqS40)]),
        TK::GreaterThanEq => Vec::from(&[Shift(State::GreaterThanEqS41)]),
        TK::EqualTo => Vec::from(&[Reduce(PK::BinaryExprNotEqExpr, 3usize)]),
        TK::NotEqualTo => Vec::from(&[Reduce(PK::BinaryExprNotEqExpr, 3usize)]),
        TK::Then => Vec::from(&[Reduce(PK::BinaryExprNotEqExpr, 3usize)]),
        TK::Else => Vec::from(&[Reduce(PK::BinaryExprNotEqExpr, 3usize)]),
        TK::BeginCurly => Vec::from(&[Reduce(PK::BinaryExprNotEqExpr, 3usize)]),
        TK::EndCurly => Vec::from(&[Reduce(PK::BinaryExprNotEqExpr, 3usize)]),
        TK::SemiColon => Vec::from(&[Reduce(PK::BinaryExprNotEqExpr, 3usize)]),
        _ => vec![],
    }
}
fn action_binaryexpr_s64(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::LogicAnd => Vec::from(&[Shift(State::LogicAndS30)]),
        TK::LogicOr => Vec::from(&[Shift(State::LogicOrS31)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS32)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS33)]),
        TK::Mul => Vec::from(&[Shift(State::MulS34)]),
        TK::Mod => Vec::from(&[Shift(State::ModS35)]),
        TK::Div => Vec::from(&[Shift(State::DivS36)]),
        TK::Exp => Vec::from(&[Shift(State::ExpS37)]),
        TK::LessThan => Vec::from(&[Shift(State::LessThanS38)]),
        TK::GreaterThan => Vec::from(&[Shift(State::GreaterThanS39)]),
        TK::LessThanEq => Vec::from(&[Shift(State::LessThanEqS40)]),
        TK::GreaterThanEq => Vec::from(&[Shift(State::GreaterThanEqS41)]),
        TK::EqualTo => Vec::from(&[Shift(State::EqualToS42)]),
        TK::NotEqualTo => Vec::from(&[Shift(State::NotEqualToS43)]),
        TK::Else => Vec::from(&[Shift(State::ElseS69)]),
        _ => vec![],
    }
}
fn action_case_s65(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Number => Vec::from(&[Shift(State::NumberS1)]),
        TK::Symbol => Vec::from(&[Shift(State::SymbolS2)]),
        TK::True => Vec::from(&[Shift(State::TrueS7)]),
        TK::False => Vec::from(&[Shift(State::FalseS8)]),
        TK::MatchAny => Vec::from(&[Shift(State::MatchAnyS70)]),
        _ => vec![],
    }
}
fn action_casematch_s66(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Reduce(PK::CaseMatch1P2, 1usize)]),
        TK::EndCurly => Vec::from(&[Reduce(PK::CaseMatch1P2, 1usize)]),
        _ => vec![],
    }
}
fn action_casearms_s67(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::EndCurly => Vec::from(&[Shift(State::EndCurlyS73)]),
        _ => vec![],
    }
}
fn action_casematch1_s68(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Shift(State::CommaS74)]),
        TK::EndCurly => Vec::from(&[Reduce(PK::CaseArmsP1, 1usize)]),
        _ => vec![],
    }
}
fn action_else_s69(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Number => Vec::from(&[Shift(State::NumberS1)]),
        TK::Symbol => Vec::from(&[Shift(State::SymbolS2)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS3)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS4)]),
        TK::BeginParen => Vec::from(&[Shift(State::BeginParenS5)]),
        TK::Not => Vec::from(&[Shift(State::NotS6)]),
        TK::True => Vec::from(&[Shift(State::TrueS7)]),
        TK::False => Vec::from(&[Shift(State::FalseS8)]),
        TK::BeginCurly => Vec::from(&[Shift(State::BeginCurlyS11)]),
        _ => vec![],
    }
}
fn action_matchany_s70(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Arrow => Vec::from(&[Reduce(PK::PatternP2, 1usize)]),
        _ => vec![],
    }
}
fn action_pattern_s71(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Arrow => Vec::from(&[Shift(State::ArrowS76)]),
        _ => vec![],
    }
}
fn action_literal_s72(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Arrow => Vec::from(&[Reduce(PK::PatternP1, 1usize)]),
        _ => vec![],
    }
}
fn action_endcurly_s73(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::ConditionalExprP3, 5usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::ConditionalExprP3, 5usize)]),
        TK::EndParen => Vec::from(&[Reduce(PK::ConditionalExprP3, 5usize)]),
        TK::EndCurly => Vec::from(&[Reduce(PK::ConditionalExprP3, 5usize)]),
        TK::SemiColon => Vec::from(&[Reduce(PK::ConditionalExprP3, 5usize)]),
        _ => vec![],
    }
}
fn action_comma_s74(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Case => Vec::from(&[Shift(State::CaseS65)]),
        _ => vec![],
    }
}
fn action_binaryexpr_s75(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::ConditionalExprIfThenElseExpr, 6usize)]),
        TK::LogicAnd => Vec::from(&[Shift(State::LogicAndS30)]),
        TK::LogicOr => Vec::from(&[Shift(State::LogicOrS31)]),
        TK::Comma => Vec::from(&[Reduce(PK::ConditionalExprIfThenElseExpr, 6usize)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS32)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS33)]),
        TK::Mul => Vec::from(&[Shift(State::MulS34)]),
        TK::Mod => Vec::from(&[Shift(State::ModS35)]),
        TK::Div => Vec::from(&[Shift(State::DivS36)]),
        TK::Exp => Vec::from(&[Shift(State::ExpS37)]),
        TK::EndParen => Vec::from(&[Reduce(PK::ConditionalExprIfThenElseExpr, 6usize)]),
        TK::LessThan => Vec::from(&[Shift(State::LessThanS38)]),
        TK::GreaterThan => Vec::from(&[Shift(State::GreaterThanS39)]),
        TK::LessThanEq => Vec::from(&[Shift(State::LessThanEqS40)]),
        TK::GreaterThanEq => Vec::from(&[Shift(State::GreaterThanEqS41)]),
        TK::EqualTo => Vec::from(&[Shift(State::EqualToS42)]),
        TK::NotEqualTo => Vec::from(&[Shift(State::NotEqualToS43)]),
        TK::EndCurly => Vec::from(&[Reduce(PK::ConditionalExprIfThenElseExpr, 6usize)]),
        TK::SemiColon => Vec::from(&[Reduce(PK::ConditionalExprIfThenElseExpr, 6usize)]),
        _ => vec![],
    }
}
fn action_arrow_s76(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Number => Vec::from(&[Shift(State::NumberS1)]),
        TK::Symbol => Vec::from(&[Shift(State::SymbolS2)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS3)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS4)]),
        TK::BeginParen => Vec::from(&[Shift(State::BeginParenS5)]),
        TK::Not => Vec::from(&[Shift(State::NotS6)]),
        TK::True => Vec::from(&[Shift(State::TrueS7)]),
        TK::False => Vec::from(&[Shift(State::FalseS8)]),
        TK::BeginCurly => Vec::from(&[Shift(State::BeginCurlyS11)]),
        _ => vec![],
    }
}
fn action_casematch_s77(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Reduce(PK::CaseMatch1P1, 3usize)]),
        TK::EndCurly => Vec::from(&[Reduce(PK::CaseMatch1P1, 3usize)]),
        _ => vec![],
    }
}
fn action_binaryexpr_s78(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::LogicAnd => Vec::from(&[Shift(State::LogicAndS30)]),
        TK::LogicOr => Vec::from(&[Shift(State::LogicOrS31)]),
        TK::Comma => Vec::from(&[Reduce(PK::CaseMatchP1, 4usize)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS32)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS33)]),
        TK::Mul => Vec::from(&[Shift(State::MulS34)]),
        TK::Mod => Vec::from(&[Shift(State::ModS35)]),
        TK::Div => Vec::from(&[Shift(State::DivS36)]),
        TK::Exp => Vec::from(&[Shift(State::ExpS37)]),
        TK::LessThan => Vec::from(&[Shift(State::LessThanS38)]),
        TK::GreaterThan => Vec::from(&[Shift(State::GreaterThanS39)]),
        TK::LessThanEq => Vec::from(&[Shift(State::LessThanEqS40)]),
        TK::GreaterThanEq => Vec::from(&[Shift(State::GreaterThanEqS41)]),
        TK::EqualTo => Vec::from(&[Shift(State::EqualToS42)]),
        TK::NotEqualTo => Vec::from(&[Shift(State::NotEqualToS43)]),
        TK::EndCurly => Vec::from(&[Reduce(PK::CaseMatchP1, 4usize)]),
        _ => vec![],
    }
}
fn goto_aug_s0(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expr => State::ExprS12,
        NonTermKind::SequenceExpr => State::SequenceExprS13,
        NonTermKind::TupleExpr1 => State::TupleExpr1S14,
        NonTermKind::TupleExpr => State::TupleExprS15,
        NonTermKind::ConditionalExpr1 => State::ConditionalExpr1S16,
        NonTermKind::ConditionalExpr => State::ConditionalExprS17,
        NonTermKind::BinaryExpr => State::BinaryExprS18,
        NonTermKind::UnaryExpr => State::UnaryExprS19,
        NonTermKind::Literal => State::LiteralS20,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::AUGS0
            )
        }
    }
}
fn goto_plus_s3(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::UnaryExpr => State::UnaryExprS21,
        NonTermKind::Literal => State::LiteralS20,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::PlusS3
            )
        }
    }
}
fn goto_minus_s4(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::UnaryExpr => State::UnaryExprS22,
        NonTermKind::Literal => State::LiteralS20,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::MinusS4
            )
        }
    }
}
fn goto_beginparen_s5(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::TupleExpr => State::TupleExprS23,
        NonTermKind::ConditionalExpr1 => State::ConditionalExpr1S16,
        NonTermKind::ConditionalExpr => State::ConditionalExprS17,
        NonTermKind::BinaryExpr => State::BinaryExprS18,
        NonTermKind::UnaryExpr => State::UnaryExprS19,
        NonTermKind::Literal => State::LiteralS20,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::BeginParenS5
            )
        }
    }
}
fn goto_not_s6(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::UnaryExpr => State::UnaryExprS24,
        NonTermKind::Literal => State::LiteralS20,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::NotS6
            )
        }
    }
}
fn goto_if_s9(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::BinaryExpr => State::BinaryExprS25,
        NonTermKind::UnaryExpr => State::UnaryExprS19,
        NonTermKind::Literal => State::LiteralS20,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::IfS9
            )
        }
    }
}
fn goto_match_s10(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::BinaryExpr => State::BinaryExprS26,
        NonTermKind::UnaryExpr => State::UnaryExprS19,
        NonTermKind::Literal => State::LiteralS20,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::MatchS10
            )
        }
    }
}
fn goto_begincurly_s11(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::SequenceExpr => State::SequenceExprS27,
        NonTermKind::TupleExpr1 => State::TupleExpr1S14,
        NonTermKind::TupleExpr => State::TupleExprS15,
        NonTermKind::ConditionalExpr1 => State::ConditionalExpr1S16,
        NonTermKind::ConditionalExpr => State::ConditionalExprS17,
        NonTermKind::BinaryExpr => State::BinaryExprS18,
        NonTermKind::UnaryExpr => State::UnaryExprS19,
        NonTermKind::Literal => State::LiteralS20,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::BeginCurlyS11
            )
        }
    }
}
fn goto_semicolon_s28(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::TupleExpr => State::TupleExprS48,
        NonTermKind::ConditionalExpr1 => State::ConditionalExpr1S16,
        NonTermKind::ConditionalExpr => State::ConditionalExprS17,
        NonTermKind::BinaryExpr => State::BinaryExprS18,
        NonTermKind::UnaryExpr => State::UnaryExprS19,
        NonTermKind::Literal => State::LiteralS20,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::SemiColonS28
            )
        }
    }
}
fn goto_comma_s29(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::ConditionalExpr => State::ConditionalExprS49,
        NonTermKind::BinaryExpr => State::BinaryExprS18,
        NonTermKind::UnaryExpr => State::UnaryExprS19,
        NonTermKind::Literal => State::LiteralS20,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::CommaS29
            )
        }
    }
}
fn goto_logicand_s30(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::BinaryExpr => State::BinaryExprS50,
        NonTermKind::UnaryExpr => State::UnaryExprS19,
        NonTermKind::Literal => State::LiteralS20,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::LogicAndS30
            )
        }
    }
}
fn goto_logicor_s31(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::BinaryExpr => State::BinaryExprS51,
        NonTermKind::UnaryExpr => State::UnaryExprS19,
        NonTermKind::Literal => State::LiteralS20,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::LogicOrS31
            )
        }
    }
}
fn goto_plus_s32(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::BinaryExpr => State::BinaryExprS52,
        NonTermKind::UnaryExpr => State::UnaryExprS19,
        NonTermKind::Literal => State::LiteralS20,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::PlusS32
            )
        }
    }
}
fn goto_minus_s33(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::BinaryExpr => State::BinaryExprS53,
        NonTermKind::UnaryExpr => State::UnaryExprS19,
        NonTermKind::Literal => State::LiteralS20,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::MinusS33
            )
        }
    }
}
fn goto_mul_s34(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::BinaryExpr => State::BinaryExprS54,
        NonTermKind::UnaryExpr => State::UnaryExprS19,
        NonTermKind::Literal => State::LiteralS20,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::MulS34
            )
        }
    }
}
fn goto_mod_s35(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::BinaryExpr => State::BinaryExprS55,
        NonTermKind::UnaryExpr => State::UnaryExprS19,
        NonTermKind::Literal => State::LiteralS20,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::ModS35
            )
        }
    }
}
fn goto_div_s36(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::BinaryExpr => State::BinaryExprS56,
        NonTermKind::UnaryExpr => State::UnaryExprS19,
        NonTermKind::Literal => State::LiteralS20,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::DivS36
            )
        }
    }
}
fn goto_exp_s37(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::BinaryExpr => State::BinaryExprS57,
        NonTermKind::UnaryExpr => State::UnaryExprS19,
        NonTermKind::Literal => State::LiteralS20,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::ExpS37
            )
        }
    }
}
fn goto_lessthan_s38(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::BinaryExpr => State::BinaryExprS58,
        NonTermKind::UnaryExpr => State::UnaryExprS19,
        NonTermKind::Literal => State::LiteralS20,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::LessThanS38
            )
        }
    }
}
fn goto_greaterthan_s39(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::BinaryExpr => State::BinaryExprS59,
        NonTermKind::UnaryExpr => State::UnaryExprS19,
        NonTermKind::Literal => State::LiteralS20,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::GreaterThanS39
            )
        }
    }
}
fn goto_lessthaneq_s40(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::BinaryExpr => State::BinaryExprS60,
        NonTermKind::UnaryExpr => State::UnaryExprS19,
        NonTermKind::Literal => State::LiteralS20,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::LessThanEqS40
            )
        }
    }
}
fn goto_greaterthaneq_s41(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::BinaryExpr => State::BinaryExprS61,
        NonTermKind::UnaryExpr => State::UnaryExprS19,
        NonTermKind::Literal => State::LiteralS20,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::GreaterThanEqS41
            )
        }
    }
}
fn goto_equalto_s42(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::BinaryExpr => State::BinaryExprS62,
        NonTermKind::UnaryExpr => State::UnaryExprS19,
        NonTermKind::Literal => State::LiteralS20,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::EqualToS42
            )
        }
    }
}
fn goto_notequalto_s43(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::BinaryExpr => State::BinaryExprS63,
        NonTermKind::UnaryExpr => State::UnaryExprS19,
        NonTermKind::Literal => State::LiteralS20,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::NotEqualToS43
            )
        }
    }
}
fn goto_then_s45(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::BinaryExpr => State::BinaryExprS64,
        NonTermKind::UnaryExpr => State::UnaryExprS19,
        NonTermKind::Literal => State::LiteralS20,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::ThenS45
            )
        }
    }
}
fn goto_begincurly_s46(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::CaseMatch => State::CaseMatchS66,
        NonTermKind::CaseArms => State::CaseArmsS67,
        NonTermKind::CaseMatch1 => State::CaseMatch1S68,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::BeginCurlyS46
            )
        }
    }
}
fn goto_case_s65(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Pattern => State::PatternS71,
        NonTermKind::Literal => State::LiteralS72,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::CaseS65
            )
        }
    }
}
fn goto_else_s69(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::BinaryExpr => State::BinaryExprS75,
        NonTermKind::UnaryExpr => State::UnaryExprS19,
        NonTermKind::Literal => State::LiteralS20,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::ElseS69
            )
        }
    }
}
fn goto_comma_s74(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::CaseMatch => State::CaseMatchS77,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::CommaS74
            )
        }
    }
}
fn goto_arrow_s76(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::BinaryExpr => State::BinaryExprS78,
        NonTermKind::UnaryExpr => State::UnaryExprS19,
        NonTermKind::Literal => State::LiteralS20,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::ArrowS76
            )
        }
    }
}
fn goto_invalid(_nonterm_kind: NonTermKind) -> State {
    panic!("Invalid GOTO entry!");
}
pub(crate) static PARSER_DEFINITION: CalculatorParserDefinition = CalculatorParserDefinition {
    actions: [
        action_aug_s0,
        action_number_s1,
        action_symbol_s2,
        action_plus_s3,
        action_minus_s4,
        action_beginparen_s5,
        action_not_s6,
        action_true_s7,
        action_false_s8,
        action_if_s9,
        action_match_s10,
        action_begincurly_s11,
        action_expr_s12,
        action_sequenceexpr_s13,
        action_tupleexpr1_s14,
        action_tupleexpr_s15,
        action_conditionalexpr1_s16,
        action_conditionalexpr_s17,
        action_binaryexpr_s18,
        action_unaryexpr_s19,
        action_literal_s20,
        action_unaryexpr_s21,
        action_unaryexpr_s22,
        action_tupleexpr_s23,
        action_unaryexpr_s24,
        action_binaryexpr_s25,
        action_binaryexpr_s26,
        action_sequenceexpr_s27,
        action_semicolon_s28,
        action_comma_s29,
        action_logicand_s30,
        action_logicor_s31,
        action_plus_s32,
        action_minus_s33,
        action_mul_s34,
        action_mod_s35,
        action_div_s36,
        action_exp_s37,
        action_lessthan_s38,
        action_greaterthan_s39,
        action_lessthaneq_s40,
        action_greaterthaneq_s41,
        action_equalto_s42,
        action_notequalto_s43,
        action_endparen_s44,
        action_then_s45,
        action_begincurly_s46,
        action_endcurly_s47,
        action_tupleexpr_s48,
        action_conditionalexpr_s49,
        action_binaryexpr_s50,
        action_binaryexpr_s51,
        action_binaryexpr_s52,
        action_binaryexpr_s53,
        action_binaryexpr_s54,
        action_binaryexpr_s55,
        action_binaryexpr_s56,
        action_binaryexpr_s57,
        action_binaryexpr_s58,
        action_binaryexpr_s59,
        action_binaryexpr_s60,
        action_binaryexpr_s61,
        action_binaryexpr_s62,
        action_binaryexpr_s63,
        action_binaryexpr_s64,
        action_case_s65,
        action_casematch_s66,
        action_casearms_s67,
        action_casematch1_s68,
        action_else_s69,
        action_matchany_s70,
        action_pattern_s71,
        action_literal_s72,
        action_endcurly_s73,
        action_comma_s74,
        action_binaryexpr_s75,
        action_arrow_s76,
        action_casematch_s77,
        action_binaryexpr_s78,
    ],
    gotos: [
        goto_aug_s0,
        goto_invalid,
        goto_invalid,
        goto_plus_s3,
        goto_minus_s4,
        goto_beginparen_s5,
        goto_not_s6,
        goto_invalid,
        goto_invalid,
        goto_if_s9,
        goto_match_s10,
        goto_begincurly_s11,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_semicolon_s28,
        goto_comma_s29,
        goto_logicand_s30,
        goto_logicor_s31,
        goto_plus_s32,
        goto_minus_s33,
        goto_mul_s34,
        goto_mod_s35,
        goto_div_s36,
        goto_exp_s37,
        goto_lessthan_s38,
        goto_greaterthan_s39,
        goto_lessthaneq_s40,
        goto_greaterthaneq_s41,
        goto_equalto_s42,
        goto_notequalto_s43,
        goto_invalid,
        goto_then_s45,
        goto_begincurly_s46,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_case_s65,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_else_s69,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_comma_s74,
        goto_invalid,
        goto_arrow_s76,
        goto_invalid,
        goto_invalid,
    ],
    token_kinds: [
        [
            Some((TK::False, true)),
            Some((TK::Match, true)),
            Some((TK::True, true)),
            Some((TK::If, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::BeginParen, true)),
            Some((TK::Not, true)),
            Some((TK::BeginCurly, true)),
            Some((TK::Number, false)),
            Some((TK::Symbol, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::Then, true)),
            Some((TK::Else, true)),
            Some((TK::LogicAnd, true)),
            Some((TK::LogicOr, true)),
            Some((TK::LessThanEq, true)),
            Some((TK::GreaterThanEq, true)),
            Some((TK::EqualTo, true)),
            Some((TK::NotEqualTo, true)),
            Some((TK::Arrow, true)),
            Some((TK::Comma, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::Mul, true)),
            Some((TK::Mod, true)),
            Some((TK::Div, true)),
            Some((TK::Exp, true)),
            Some((TK::EndParen, true)),
            Some((TK::LessThan, true)),
            Some((TK::GreaterThan, true)),
            Some((TK::BeginCurly, true)),
            Some((TK::EndCurly, true)),
            Some((TK::SemiColon, true)),
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::Then, true)),
            Some((TK::Else, true)),
            Some((TK::LogicAnd, true)),
            Some((TK::LogicOr, true)),
            Some((TK::LessThanEq, true)),
            Some((TK::GreaterThanEq, true)),
            Some((TK::EqualTo, true)),
            Some((TK::NotEqualTo, true)),
            Some((TK::Arrow, true)),
            Some((TK::Comma, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::Mul, true)),
            Some((TK::Mod, true)),
            Some((TK::Div, true)),
            Some((TK::Exp, true)),
            Some((TK::EndParen, true)),
            Some((TK::LessThan, true)),
            Some((TK::GreaterThan, true)),
            Some((TK::BeginCurly, true)),
            Some((TK::EndCurly, true)),
            Some((TK::SemiColon, true)),
        ],
        [
            Some((TK::False, true)),
            Some((TK::True, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::BeginParen, true)),
            Some((TK::Not, true)),
            Some((TK::BeginCurly, true)),
            Some((TK::Number, false)),
            Some((TK::Symbol, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::False, true)),
            Some((TK::True, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::BeginParen, true)),
            Some((TK::Not, true)),
            Some((TK::BeginCurly, true)),
            Some((TK::Number, false)),
            Some((TK::Symbol, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::False, true)),
            Some((TK::Match, true)),
            Some((TK::True, true)),
            Some((TK::If, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::BeginParen, true)),
            Some((TK::Not, true)),
            Some((TK::BeginCurly, true)),
            Some((TK::Number, false)),
            Some((TK::Symbol, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::False, true)),
            Some((TK::True, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::BeginParen, true)),
            Some((TK::Not, true)),
            Some((TK::BeginCurly, true)),
            Some((TK::Number, false)),
            Some((TK::Symbol, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::Then, true)),
            Some((TK::Else, true)),
            Some((TK::LogicAnd, true)),
            Some((TK::LogicOr, true)),
            Some((TK::LessThanEq, true)),
            Some((TK::GreaterThanEq, true)),
            Some((TK::EqualTo, true)),
            Some((TK::NotEqualTo, true)),
            Some((TK::Arrow, true)),
            Some((TK::Comma, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::Mul, true)),
            Some((TK::Mod, true)),
            Some((TK::Div, true)),
            Some((TK::Exp, true)),
            Some((TK::EndParen, true)),
            Some((TK::LessThan, true)),
            Some((TK::GreaterThan, true)),
            Some((TK::BeginCurly, true)),
            Some((TK::EndCurly, true)),
            Some((TK::SemiColon, true)),
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::Then, true)),
            Some((TK::Else, true)),
            Some((TK::LogicAnd, true)),
            Some((TK::LogicOr, true)),
            Some((TK::LessThanEq, true)),
            Some((TK::GreaterThanEq, true)),
            Some((TK::EqualTo, true)),
            Some((TK::NotEqualTo, true)),
            Some((TK::Arrow, true)),
            Some((TK::Comma, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::Mul, true)),
            Some((TK::Mod, true)),
            Some((TK::Div, true)),
            Some((TK::Exp, true)),
            Some((TK::EndParen, true)),
            Some((TK::LessThan, true)),
            Some((TK::GreaterThan, true)),
            Some((TK::BeginCurly, true)),
            Some((TK::EndCurly, true)),
            Some((TK::SemiColon, true)),
        ],
        [
            Some((TK::False, true)),
            Some((TK::True, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::BeginParen, true)),
            Some((TK::Not, true)),
            Some((TK::BeginCurly, true)),
            Some((TK::Number, false)),
            Some((TK::Symbol, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::False, true)),
            Some((TK::True, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::BeginParen, true)),
            Some((TK::Not, true)),
            Some((TK::BeginCurly, true)),
            Some((TK::Number, false)),
            Some((TK::Symbol, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::False, true)),
            Some((TK::Match, true)),
            Some((TK::True, true)),
            Some((TK::If, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::BeginParen, true)),
            Some((TK::Not, true)),
            Some((TK::BeginCurly, true)),
            Some((TK::Number, false)),
            Some((TK::Symbol, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::EndCurly, true)),
            Some((TK::SemiColon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::EndCurly, true)),
            Some((TK::SemiColon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::Comma, true)),
            Some((TK::EndParen, true)),
            Some((TK::EndCurly, true)),
            Some((TK::SemiColon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::Comma, true)),
            Some((TK::EndParen, true)),
            Some((TK::EndCurly, true)),
            Some((TK::SemiColon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::LogicAnd, true)),
            Some((TK::LogicOr, true)),
            Some((TK::LessThanEq, true)),
            Some((TK::GreaterThanEq, true)),
            Some((TK::EqualTo, true)),
            Some((TK::NotEqualTo, true)),
            Some((TK::Comma, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::Mul, true)),
            Some((TK::Mod, true)),
            Some((TK::Div, true)),
            Some((TK::Exp, true)),
            Some((TK::EndParen, true)),
            Some((TK::LessThan, true)),
            Some((TK::GreaterThan, true)),
            Some((TK::EndCurly, true)),
            Some((TK::SemiColon, true)),
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::Then, true)),
            Some((TK::Else, true)),
            Some((TK::LogicAnd, true)),
            Some((TK::LogicOr, true)),
            Some((TK::LessThanEq, true)),
            Some((TK::GreaterThanEq, true)),
            Some((TK::EqualTo, true)),
            Some((TK::NotEqualTo, true)),
            Some((TK::Comma, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::Mul, true)),
            Some((TK::Mod, true)),
            Some((TK::Div, true)),
            Some((TK::Exp, true)),
            Some((TK::EndParen, true)),
            Some((TK::LessThan, true)),
            Some((TK::GreaterThan, true)),
            Some((TK::BeginCurly, true)),
            Some((TK::EndCurly, true)),
            Some((TK::SemiColon, true)),
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::Then, true)),
            Some((TK::Else, true)),
            Some((TK::LogicAnd, true)),
            Some((TK::LogicOr, true)),
            Some((TK::LessThanEq, true)),
            Some((TK::GreaterThanEq, true)),
            Some((TK::EqualTo, true)),
            Some((TK::NotEqualTo, true)),
            Some((TK::Comma, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::Mul, true)),
            Some((TK::Mod, true)),
            Some((TK::Div, true)),
            Some((TK::Exp, true)),
            Some((TK::EndParen, true)),
            Some((TK::LessThan, true)),
            Some((TK::GreaterThan, true)),
            Some((TK::BeginCurly, true)),
            Some((TK::EndCurly, true)),
            Some((TK::SemiColon, true)),
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::Then, true)),
            Some((TK::Else, true)),
            Some((TK::LogicAnd, true)),
            Some((TK::LogicOr, true)),
            Some((TK::LessThanEq, true)),
            Some((TK::GreaterThanEq, true)),
            Some((TK::EqualTo, true)),
            Some((TK::NotEqualTo, true)),
            Some((TK::Comma, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::Mul, true)),
            Some((TK::Mod, true)),
            Some((TK::Div, true)),
            Some((TK::Exp, true)),
            Some((TK::EndParen, true)),
            Some((TK::LessThan, true)),
            Some((TK::GreaterThan, true)),
            Some((TK::BeginCurly, true)),
            Some((TK::EndCurly, true)),
            Some((TK::SemiColon, true)),
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::Then, true)),
            Some((TK::Else, true)),
            Some((TK::LogicAnd, true)),
            Some((TK::LogicOr, true)),
            Some((TK::LessThanEq, true)),
            Some((TK::GreaterThanEq, true)),
            Some((TK::EqualTo, true)),
            Some((TK::NotEqualTo, true)),
            Some((TK::Comma, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::Mul, true)),
            Some((TK::Mod, true)),
            Some((TK::Div, true)),
            Some((TK::Exp, true)),
            Some((TK::EndParen, true)),
            Some((TK::LessThan, true)),
            Some((TK::GreaterThan, true)),
            Some((TK::BeginCurly, true)),
            Some((TK::EndCurly, true)),
            Some((TK::SemiColon, true)),
            None,
        ],
        [
            Some((TK::EndParen, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::Then, true)),
            Some((TK::Else, true)),
            Some((TK::LogicAnd, true)),
            Some((TK::LogicOr, true)),
            Some((TK::LessThanEq, true)),
            Some((TK::GreaterThanEq, true)),
            Some((TK::EqualTo, true)),
            Some((TK::NotEqualTo, true)),
            Some((TK::Comma, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::Mul, true)),
            Some((TK::Mod, true)),
            Some((TK::Div, true)),
            Some((TK::Exp, true)),
            Some((TK::EndParen, true)),
            Some((TK::LessThan, true)),
            Some((TK::GreaterThan, true)),
            Some((TK::BeginCurly, true)),
            Some((TK::EndCurly, true)),
            Some((TK::SemiColon, true)),
            None,
        ],
        [
            Some((TK::Then, true)),
            Some((TK::LogicAnd, true)),
            Some((TK::LogicOr, true)),
            Some((TK::LessThanEq, true)),
            Some((TK::GreaterThanEq, true)),
            Some((TK::EqualTo, true)),
            Some((TK::NotEqualTo, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::Mul, true)),
            Some((TK::Mod, true)),
            Some((TK::Div, true)),
            Some((TK::Exp, true)),
            Some((TK::LessThan, true)),
            Some((TK::GreaterThan, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::LogicAnd, true)),
            Some((TK::LogicOr, true)),
            Some((TK::LessThanEq, true)),
            Some((TK::GreaterThanEq, true)),
            Some((TK::EqualTo, true)),
            Some((TK::NotEqualTo, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::Mul, true)),
            Some((TK::Mod, true)),
            Some((TK::Div, true)),
            Some((TK::Exp, true)),
            Some((TK::LessThan, true)),
            Some((TK::GreaterThan, true)),
            Some((TK::BeginCurly, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::EndCurly, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::False, true)),
            Some((TK::Match, true)),
            Some((TK::True, true)),
            Some((TK::If, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::BeginParen, true)),
            Some((TK::Not, true)),
            Some((TK::BeginCurly, true)),
            Some((TK::Number, false)),
            Some((TK::Symbol, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::False, true)),
            Some((TK::Match, true)),
            Some((TK::True, true)),
            Some((TK::If, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::BeginParen, true)),
            Some((TK::Not, true)),
            Some((TK::BeginCurly, true)),
            Some((TK::Number, false)),
            Some((TK::Symbol, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::False, true)),
            Some((TK::True, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::BeginParen, true)),
            Some((TK::Not, true)),
            Some((TK::BeginCurly, true)),
            Some((TK::Number, false)),
            Some((TK::Symbol, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::False, true)),
            Some((TK::True, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::BeginParen, true)),
            Some((TK::Not, true)),
            Some((TK::BeginCurly, true)),
            Some((TK::Number, false)),
            Some((TK::Symbol, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::False, true)),
            Some((TK::True, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::BeginParen, true)),
            Some((TK::Not, true)),
            Some((TK::BeginCurly, true)),
            Some((TK::Number, false)),
            Some((TK::Symbol, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::False, true)),
            Some((TK::True, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::BeginParen, true)),
            Some((TK::Not, true)),
            Some((TK::BeginCurly, true)),
            Some((TK::Number, false)),
            Some((TK::Symbol, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::False, true)),
            Some((TK::True, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::BeginParen, true)),
            Some((TK::Not, true)),
            Some((TK::BeginCurly, true)),
            Some((TK::Number, false)),
            Some((TK::Symbol, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::False, true)),
            Some((TK::True, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::BeginParen, true)),
            Some((TK::Not, true)),
            Some((TK::BeginCurly, true)),
            Some((TK::Number, false)),
            Some((TK::Symbol, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::False, true)),
            Some((TK::True, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::BeginParen, true)),
            Some((TK::Not, true)),
            Some((TK::BeginCurly, true)),
            Some((TK::Number, false)),
            Some((TK::Symbol, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::False, true)),
            Some((TK::True, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::BeginParen, true)),
            Some((TK::Not, true)),
            Some((TK::BeginCurly, true)),
            Some((TK::Number, false)),
            Some((TK::Symbol, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::False, true)),
            Some((TK::True, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::BeginParen, true)),
            Some((TK::Not, true)),
            Some((TK::BeginCurly, true)),
            Some((TK::Number, false)),
            Some((TK::Symbol, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::False, true)),
            Some((TK::True, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::BeginParen, true)),
            Some((TK::Not, true)),
            Some((TK::BeginCurly, true)),
            Some((TK::Number, false)),
            Some((TK::Symbol, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::False, true)),
            Some((TK::True, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::BeginParen, true)),
            Some((TK::Not, true)),
            Some((TK::BeginCurly, true)),
            Some((TK::Number, false)),
            Some((TK::Symbol, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::False, true)),
            Some((TK::True, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::BeginParen, true)),
            Some((TK::Not, true)),
            Some((TK::BeginCurly, true)),
            Some((TK::Number, false)),
            Some((TK::Symbol, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::False, true)),
            Some((TK::True, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::BeginParen, true)),
            Some((TK::Not, true)),
            Some((TK::BeginCurly, true)),
            Some((TK::Number, false)),
            Some((TK::Symbol, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::False, true)),
            Some((TK::True, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::BeginParen, true)),
            Some((TK::Not, true)),
            Some((TK::BeginCurly, true)),
            Some((TK::Number, false)),
            Some((TK::Symbol, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::Then, true)),
            Some((TK::Else, true)),
            Some((TK::LogicAnd, true)),
            Some((TK::LogicOr, true)),
            Some((TK::LessThanEq, true)),
            Some((TK::GreaterThanEq, true)),
            Some((TK::EqualTo, true)),
            Some((TK::NotEqualTo, true)),
            Some((TK::Comma, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::Mul, true)),
            Some((TK::Mod, true)),
            Some((TK::Div, true)),
            Some((TK::Exp, true)),
            Some((TK::EndParen, true)),
            Some((TK::LessThan, true)),
            Some((TK::GreaterThan, true)),
            Some((TK::BeginCurly, true)),
            Some((TK::EndCurly, true)),
            Some((TK::SemiColon, true)),
            None,
        ],
        [
            Some((TK::False, true)),
            Some((TK::True, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::BeginParen, true)),
            Some((TK::Not, true)),
            Some((TK::BeginCurly, true)),
            Some((TK::Number, false)),
            Some((TK::Symbol, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Case, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::Then, true)),
            Some((TK::Else, true)),
            Some((TK::LogicAnd, true)),
            Some((TK::LogicOr, true)),
            Some((TK::LessThanEq, true)),
            Some((TK::GreaterThanEq, true)),
            Some((TK::EqualTo, true)),
            Some((TK::NotEqualTo, true)),
            Some((TK::Comma, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::Mul, true)),
            Some((TK::Mod, true)),
            Some((TK::Div, true)),
            Some((TK::Exp, true)),
            Some((TK::EndParen, true)),
            Some((TK::LessThan, true)),
            Some((TK::GreaterThan, true)),
            Some((TK::BeginCurly, true)),
            Some((TK::EndCurly, true)),
            Some((TK::SemiColon, true)),
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::EndCurly, true)),
            Some((TK::SemiColon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::Comma, true)),
            Some((TK::EndParen, true)),
            Some((TK::EndCurly, true)),
            Some((TK::SemiColon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::Then, true)),
            Some((TK::Else, true)),
            Some((TK::LogicAnd, true)),
            Some((TK::LogicOr, true)),
            Some((TK::LessThanEq, true)),
            Some((TK::GreaterThanEq, true)),
            Some((TK::EqualTo, true)),
            Some((TK::NotEqualTo, true)),
            Some((TK::Comma, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::Mul, true)),
            Some((TK::Mod, true)),
            Some((TK::Div, true)),
            Some((TK::Exp, true)),
            Some((TK::EndParen, true)),
            Some((TK::LessThan, true)),
            Some((TK::GreaterThan, true)),
            Some((TK::BeginCurly, true)),
            Some((TK::EndCurly, true)),
            Some((TK::SemiColon, true)),
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::Then, true)),
            Some((TK::Else, true)),
            Some((TK::LogicAnd, true)),
            Some((TK::LogicOr, true)),
            Some((TK::LessThanEq, true)),
            Some((TK::GreaterThanEq, true)),
            Some((TK::EqualTo, true)),
            Some((TK::NotEqualTo, true)),
            Some((TK::Comma, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::Mul, true)),
            Some((TK::Mod, true)),
            Some((TK::Div, true)),
            Some((TK::Exp, true)),
            Some((TK::EndParen, true)),
            Some((TK::LessThan, true)),
            Some((TK::GreaterThan, true)),
            Some((TK::BeginCurly, true)),
            Some((TK::EndCurly, true)),
            Some((TK::SemiColon, true)),
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::Then, true)),
            Some((TK::Else, true)),
            Some((TK::LogicAnd, true)),
            Some((TK::LogicOr, true)),
            Some((TK::LessThanEq, true)),
            Some((TK::GreaterThanEq, true)),
            Some((TK::EqualTo, true)),
            Some((TK::NotEqualTo, true)),
            Some((TK::Comma, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::Mul, true)),
            Some((TK::Mod, true)),
            Some((TK::Div, true)),
            Some((TK::Exp, true)),
            Some((TK::EndParen, true)),
            Some((TK::LessThan, true)),
            Some((TK::GreaterThan, true)),
            Some((TK::BeginCurly, true)),
            Some((TK::EndCurly, true)),
            Some((TK::SemiColon, true)),
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::Then, true)),
            Some((TK::Else, true)),
            Some((TK::LogicAnd, true)),
            Some((TK::LogicOr, true)),
            Some((TK::LessThanEq, true)),
            Some((TK::GreaterThanEq, true)),
            Some((TK::EqualTo, true)),
            Some((TK::NotEqualTo, true)),
            Some((TK::Comma, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::Mul, true)),
            Some((TK::Mod, true)),
            Some((TK::Div, true)),
            Some((TK::Exp, true)),
            Some((TK::EndParen, true)),
            Some((TK::LessThan, true)),
            Some((TK::GreaterThan, true)),
            Some((TK::BeginCurly, true)),
            Some((TK::EndCurly, true)),
            Some((TK::SemiColon, true)),
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::Then, true)),
            Some((TK::Else, true)),
            Some((TK::LogicAnd, true)),
            Some((TK::LogicOr, true)),
            Some((TK::LessThanEq, true)),
            Some((TK::GreaterThanEq, true)),
            Some((TK::EqualTo, true)),
            Some((TK::NotEqualTo, true)),
            Some((TK::Comma, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::Mul, true)),
            Some((TK::Mod, true)),
            Some((TK::Div, true)),
            Some((TK::Exp, true)),
            Some((TK::EndParen, true)),
            Some((TK::LessThan, true)),
            Some((TK::GreaterThan, true)),
            Some((TK::BeginCurly, true)),
            Some((TK::EndCurly, true)),
            Some((TK::SemiColon, true)),
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::Then, true)),
            Some((TK::Else, true)),
            Some((TK::LogicAnd, true)),
            Some((TK::LogicOr, true)),
            Some((TK::LessThanEq, true)),
            Some((TK::GreaterThanEq, true)),
            Some((TK::EqualTo, true)),
            Some((TK::NotEqualTo, true)),
            Some((TK::Comma, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::Mul, true)),
            Some((TK::Mod, true)),
            Some((TK::Div, true)),
            Some((TK::Exp, true)),
            Some((TK::EndParen, true)),
            Some((TK::LessThan, true)),
            Some((TK::GreaterThan, true)),
            Some((TK::BeginCurly, true)),
            Some((TK::EndCurly, true)),
            Some((TK::SemiColon, true)),
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::Then, true)),
            Some((TK::Else, true)),
            Some((TK::LogicAnd, true)),
            Some((TK::LogicOr, true)),
            Some((TK::LessThanEq, true)),
            Some((TK::GreaterThanEq, true)),
            Some((TK::EqualTo, true)),
            Some((TK::NotEqualTo, true)),
            Some((TK::Comma, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::Mul, true)),
            Some((TK::Mod, true)),
            Some((TK::Div, true)),
            Some((TK::Exp, true)),
            Some((TK::EndParen, true)),
            Some((TK::LessThan, true)),
            Some((TK::GreaterThan, true)),
            Some((TK::BeginCurly, true)),
            Some((TK::EndCurly, true)),
            Some((TK::SemiColon, true)),
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::Then, true)),
            Some((TK::Else, true)),
            Some((TK::LogicAnd, true)),
            Some((TK::LogicOr, true)),
            Some((TK::LessThanEq, true)),
            Some((TK::GreaterThanEq, true)),
            Some((TK::EqualTo, true)),
            Some((TK::NotEqualTo, true)),
            Some((TK::Comma, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::Mul, true)),
            Some((TK::Mod, true)),
            Some((TK::Div, true)),
            Some((TK::Exp, true)),
            Some((TK::EndParen, true)),
            Some((TK::LessThan, true)),
            Some((TK::GreaterThan, true)),
            Some((TK::BeginCurly, true)),
            Some((TK::EndCurly, true)),
            Some((TK::SemiColon, true)),
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::Then, true)),
            Some((TK::Else, true)),
            Some((TK::LogicAnd, true)),
            Some((TK::LogicOr, true)),
            Some((TK::LessThanEq, true)),
            Some((TK::GreaterThanEq, true)),
            Some((TK::EqualTo, true)),
            Some((TK::NotEqualTo, true)),
            Some((TK::Comma, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::Mul, true)),
            Some((TK::Mod, true)),
            Some((TK::Div, true)),
            Some((TK::Exp, true)),
            Some((TK::EndParen, true)),
            Some((TK::LessThan, true)),
            Some((TK::GreaterThan, true)),
            Some((TK::BeginCurly, true)),
            Some((TK::EndCurly, true)),
            Some((TK::SemiColon, true)),
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::Then, true)),
            Some((TK::Else, true)),
            Some((TK::LogicAnd, true)),
            Some((TK::LogicOr, true)),
            Some((TK::LessThanEq, true)),
            Some((TK::GreaterThanEq, true)),
            Some((TK::EqualTo, true)),
            Some((TK::NotEqualTo, true)),
            Some((TK::Comma, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::Mul, true)),
            Some((TK::Mod, true)),
            Some((TK::Div, true)),
            Some((TK::Exp, true)),
            Some((TK::EndParen, true)),
            Some((TK::LessThan, true)),
            Some((TK::GreaterThan, true)),
            Some((TK::BeginCurly, true)),
            Some((TK::EndCurly, true)),
            Some((TK::SemiColon, true)),
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::Then, true)),
            Some((TK::Else, true)),
            Some((TK::LogicAnd, true)),
            Some((TK::LogicOr, true)),
            Some((TK::LessThanEq, true)),
            Some((TK::GreaterThanEq, true)),
            Some((TK::EqualTo, true)),
            Some((TK::NotEqualTo, true)),
            Some((TK::Comma, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::Mul, true)),
            Some((TK::Mod, true)),
            Some((TK::Div, true)),
            Some((TK::Exp, true)),
            Some((TK::EndParen, true)),
            Some((TK::LessThan, true)),
            Some((TK::GreaterThan, true)),
            Some((TK::BeginCurly, true)),
            Some((TK::EndCurly, true)),
            Some((TK::SemiColon, true)),
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::Then, true)),
            Some((TK::Else, true)),
            Some((TK::LogicAnd, true)),
            Some((TK::LogicOr, true)),
            Some((TK::LessThanEq, true)),
            Some((TK::GreaterThanEq, true)),
            Some((TK::EqualTo, true)),
            Some((TK::NotEqualTo, true)),
            Some((TK::Comma, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::Mul, true)),
            Some((TK::Mod, true)),
            Some((TK::Div, true)),
            Some((TK::Exp, true)),
            Some((TK::EndParen, true)),
            Some((TK::LessThan, true)),
            Some((TK::GreaterThan, true)),
            Some((TK::BeginCurly, true)),
            Some((TK::EndCurly, true)),
            Some((TK::SemiColon, true)),
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::Then, true)),
            Some((TK::Else, true)),
            Some((TK::LogicAnd, true)),
            Some((TK::LogicOr, true)),
            Some((TK::LessThanEq, true)),
            Some((TK::GreaterThanEq, true)),
            Some((TK::EqualTo, true)),
            Some((TK::NotEqualTo, true)),
            Some((TK::Comma, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::Mul, true)),
            Some((TK::Mod, true)),
            Some((TK::Div, true)),
            Some((TK::Exp, true)),
            Some((TK::EndParen, true)),
            Some((TK::LessThan, true)),
            Some((TK::GreaterThan, true)),
            Some((TK::BeginCurly, true)),
            Some((TK::EndCurly, true)),
            Some((TK::SemiColon, true)),
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::Then, true)),
            Some((TK::Else, true)),
            Some((TK::LogicAnd, true)),
            Some((TK::LogicOr, true)),
            Some((TK::LessThanEq, true)),
            Some((TK::GreaterThanEq, true)),
            Some((TK::EqualTo, true)),
            Some((TK::NotEqualTo, true)),
            Some((TK::Comma, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::Mul, true)),
            Some((TK::Mod, true)),
            Some((TK::Div, true)),
            Some((TK::Exp, true)),
            Some((TK::EndParen, true)),
            Some((TK::LessThan, true)),
            Some((TK::GreaterThan, true)),
            Some((TK::BeginCurly, true)),
            Some((TK::EndCurly, true)),
            Some((TK::SemiColon, true)),
            None,
        ],
        [
            Some((TK::Else, true)),
            Some((TK::LogicAnd, true)),
            Some((TK::LogicOr, true)),
            Some((TK::LessThanEq, true)),
            Some((TK::GreaterThanEq, true)),
            Some((TK::EqualTo, true)),
            Some((TK::NotEqualTo, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::Mul, true)),
            Some((TK::Mod, true)),
            Some((TK::Div, true)),
            Some((TK::Exp, true)),
            Some((TK::LessThan, true)),
            Some((TK::GreaterThan, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::False, true)),
            Some((TK::True, true)),
            Some((TK::MatchAny, true)),
            Some((TK::Number, false)),
            Some((TK::Symbol, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Comma, true)),
            Some((TK::EndCurly, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::EndCurly, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Comma, true)),
            Some((TK::EndCurly, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::False, true)),
            Some((TK::True, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::BeginParen, true)),
            Some((TK::Not, true)),
            Some((TK::BeginCurly, true)),
            Some((TK::Number, false)),
            Some((TK::Symbol, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Arrow, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Arrow, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Arrow, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::Comma, true)),
            Some((TK::EndParen, true)),
            Some((TK::EndCurly, true)),
            Some((TK::SemiColon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Case, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::LogicAnd, true)),
            Some((TK::LogicOr, true)),
            Some((TK::LessThanEq, true)),
            Some((TK::GreaterThanEq, true)),
            Some((TK::EqualTo, true)),
            Some((TK::NotEqualTo, true)),
            Some((TK::Comma, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::Mul, true)),
            Some((TK::Mod, true)),
            Some((TK::Div, true)),
            Some((TK::Exp, true)),
            Some((TK::EndParen, true)),
            Some((TK::LessThan, true)),
            Some((TK::GreaterThan, true)),
            Some((TK::EndCurly, true)),
            Some((TK::SemiColon, true)),
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::False, true)),
            Some((TK::True, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::BeginParen, true)),
            Some((TK::Not, true)),
            Some((TK::BeginCurly, true)),
            Some((TK::Number, false)),
            Some((TK::Symbol, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Comma, true)),
            Some((TK::EndCurly, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::LogicAnd, true)),
            Some((TK::LogicOr, true)),
            Some((TK::LessThanEq, true)),
            Some((TK::GreaterThanEq, true)),
            Some((TK::EqualTo, true)),
            Some((TK::NotEqualTo, true)),
            Some((TK::Comma, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::Mul, true)),
            Some((TK::Mod, true)),
            Some((TK::Div, true)),
            Some((TK::Exp, true)),
            Some((TK::LessThan, true)),
            Some((TK::GreaterThan, true)),
            Some((TK::EndCurly, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
    ],
};
impl ParserDefinition<State, ProdKind, TokenKind, NonTermKind>
for CalculatorParserDefinition {
    fn actions(&self, state: State, token: TokenKind) -> Vec<Action<State, ProdKind>> {
        PARSER_DEFINITION.actions[state as usize](token)
    }
    fn goto(&self, state: State, nonterm: NonTermKind) -> State {
        PARSER_DEFINITION.gotos[state as usize](nonterm)
    }
    fn expected_token_kinds(&self, state: State) -> Vec<(TokenKind, bool)> {
        PARSER_DEFINITION.token_kinds[state as usize].iter().map_while(|t| *t).collect()
    }
    fn longest_match() -> bool {
        true
    }
    fn grammar_order() -> bool {
        true
    }
}
pub(crate) type Context<'i, I> = LRContext<'i, I, State, TokenKind>;
pub struct CalculatorParser<
    'i,
    I: InputT + ?Sized,
    L: Lexer<'i, Context<'i, I>, State, TokenKind, Input = I>,
    B,
>(
    LRParser<
        'i,
        Context<'i, I>,
        State,
        ProdKind,
        TokenKind,
        NonTermKind,
        CalculatorParserDefinition,
        L,
        B,
        I,
    >,
);
#[allow(dead_code)]
impl<
    'i,
> CalculatorParser<
    'i,
    Input,
    StringLexer<Context<'i, Input>, State, TokenKind, TokenRecognizer, TERMINAL_COUNT>,
    DefaultBuilder,
> {
    pub fn new() -> Self {
        Self(
            LRParser::new(
                &PARSER_DEFINITION,
                State::default(),
                false,
                false,
                StringLexer::new(true, &RECOGNIZERS),
                DefaultBuilder::new(),
            ),
        )
    }
}
#[allow(dead_code)]
impl<'i, I, L, B> Parser<'i, I, Context<'i, I>, State, TokenKind>
for CalculatorParser<'i, I, L, B>
where
    I: InputT + ?Sized + Debug,
    L: Lexer<'i, Context<'i, I>, State, TokenKind, Input = I>,
    B: LRBuilder<'i, I, Context<'i, I>, State, ProdKind, TokenKind>,
{
    type Output = B::Output;
    fn parse(&self, input: &'i I) -> Result<Self::Output> {
        self.0.parse(input)
    }
    fn parse_with_context(
        &self,
        context: &mut Context<'i, I>,
        input: &'i I,
    ) -> Result<Self::Output> {
        self.0.parse_with_context(context, input)
    }
    fn parse_file<'a, F: AsRef<std::path::Path>>(
        &'a mut self,
        file: F,
    ) -> Result<Self::Output>
    where
        'a: 'i,
    {
        self.0.parse_file(file)
    }
}
#[allow(dead_code)]
#[derive(Debug)]
pub enum Recognizer {
    Stop,
    StrMatch(&'static str),
    RegexMatch(Lazy<Regex>),
}
#[allow(dead_code)]
#[derive(Debug)]
pub struct TokenRecognizer(TokenKind, Recognizer);
impl<'i> TokenRecognizerT<'i> for TokenRecognizer {
    fn recognize(&self, input: &'i str) -> Option<&'i str> {
        match &self {
            #[allow(unused_variables)]
            TokenRecognizer(token_kind, Recognizer::StrMatch(s)) => {
                logn!("{} {:?} -- ", "    Recognizing".green(), token_kind);
                if input.starts_with(s) {
                    log!("{}", "recognized".bold().green());
                    Some(s)
                } else {
                    log!("{}", "not recognized".red());
                    None
                }
            }
            #[allow(unused_variables)]
            TokenRecognizer(token_kind, Recognizer::RegexMatch(r)) => {
                logn!("{} {:?} -- ", "    Recognizing".green(), token_kind);
                let match_str = r.find(input);
                match match_str {
                    Some(x) => {
                        let x_str = x.as_str();
                        log!("{} '{}'", "recognized".bold().green(), x_str);
                        Some(x_str)
                    }
                    _ => {
                        log!("{}", "not recognized".red());
                        None
                    }
                }
            }
            TokenRecognizer(_, Recognizer::Stop) => {
                logn!("{} STOP -- ", "    Recognizing".green());
                if input.is_empty() {
                    log!("{}", "recognized".bold().green());
                    Some("")
                } else {
                    log!("{}", "not recognized".red());
                    None
                }
            }
        }
    }
}
pub(crate) static RECOGNIZERS: [TokenRecognizer; TERMINAL_COUNT] = [
    TokenRecognizer(TokenKind::STOP, Recognizer::Stop),
    TokenRecognizer(
        TokenKind::Number,
        Recognizer::RegexMatch(
            Lazy::new(|| { Regex::new(concat!("^", "\\d+(\\.\\d+)?")).unwrap() }),
        ),
    ),
    TokenRecognizer(
        TokenKind::Symbol,
        Recognizer::RegexMatch(
            Lazy::new(|| { Regex::new(concat!("^", "[\\w--\\d]\\w*")).unwrap() }),
        ),
    ),
    TokenRecognizer(TokenKind::LogicAnd, Recognizer::StrMatch("&&")),
    TokenRecognizer(TokenKind::LogicOr, Recognizer::StrMatch("||")),
    TokenRecognizer(TokenKind::Comma, Recognizer::StrMatch(",")),
    TokenRecognizer(TokenKind::Plus, Recognizer::StrMatch("+")),
    TokenRecognizer(TokenKind::Minus, Recognizer::StrMatch("-")),
    TokenRecognizer(TokenKind::Mul, Recognizer::StrMatch("*")),
    TokenRecognizer(TokenKind::Mod, Recognizer::StrMatch("%")),
    TokenRecognizer(TokenKind::Div, Recognizer::StrMatch("/")),
    TokenRecognizer(TokenKind::Exp, Recognizer::StrMatch("^")),
    TokenRecognizer(TokenKind::BeginParen, Recognizer::StrMatch("(")),
    TokenRecognizer(TokenKind::EndParen, Recognizer::StrMatch(")")),
    TokenRecognizer(TokenKind::LessThan, Recognizer::StrMatch("<")),
    TokenRecognizer(TokenKind::GreaterThan, Recognizer::StrMatch(">")),
    TokenRecognizer(TokenKind::LessThanEq, Recognizer::StrMatch("<=")),
    TokenRecognizer(TokenKind::GreaterThanEq, Recognizer::StrMatch(">=")),
    TokenRecognizer(TokenKind::EqualTo, Recognizer::StrMatch("==")),
    TokenRecognizer(TokenKind::NotEqualTo, Recognizer::StrMatch("!=")),
    TokenRecognizer(TokenKind::Not, Recognizer::StrMatch("!")),
    TokenRecognizer(TokenKind::True, Recognizer::StrMatch("true")),
    TokenRecognizer(TokenKind::False, Recognizer::StrMatch("false")),
    TokenRecognizer(TokenKind::If, Recognizer::StrMatch("if")),
    TokenRecognizer(TokenKind::Then, Recognizer::StrMatch("then")),
    TokenRecognizer(TokenKind::Else, Recognizer::StrMatch("else")),
    TokenRecognizer(TokenKind::Match, Recognizer::StrMatch("match")),
    TokenRecognizer(TokenKind::Case, Recognizer::StrMatch("case")),
    TokenRecognizer(TokenKind::Arrow, Recognizer::StrMatch("=>")),
    TokenRecognizer(TokenKind::BeginCurly, Recognizer::StrMatch("{")),
    TokenRecognizer(TokenKind::EndCurly, Recognizer::StrMatch("}")),
    TokenRecognizer(TokenKind::SemiColon, Recognizer::StrMatch(";")),
    TokenRecognizer(TokenKind::MatchAny, Recognizer::StrMatch("_")),
];
pub struct DefaultBuilder {
    res_stack: Vec<Symbol>,
}
impl DefaultBuilder {
    #[allow(dead_code)]
    pub fn new() -> Self {
        Self { res_stack: vec![] }
    }
}
impl Builder for DefaultBuilder {
    type Output = calculator_actions::Expr;
    fn get_result(&mut self) -> Self::Output {
        match self.res_stack.pop().unwrap() {
            Symbol::NonTerminal(NonTerminal::Expr(r)) => r,
            _ => panic!("Invalid result on the parse stack!"),
        }
    }
}
impl<'i> LRBuilder<'i, Input, Context<'i, Input>, State, ProdKind, TokenKind>
for DefaultBuilder {
    #![allow(unused_variables)]
    fn shift_action(
        &mut self,
        context: &mut Context<'i, Input>,
        token: Token<'i, Input, TokenKind>,
    ) {
        let val = match token.kind {
            TokenKind::STOP => panic!("Cannot shift STOP token!"),
            TokenKind::Number => {
                Terminal::Number(calculator_actions::number(&*context, token))
            }
            TokenKind::Symbol => {
                Terminal::Symbol(calculator_actions::symbol(&*context, token))
            }
            TokenKind::LogicAnd => Terminal::LogicAnd,
            TokenKind::LogicOr => Terminal::LogicOr,
            TokenKind::Comma => Terminal::Comma,
            TokenKind::Plus => Terminal::Plus,
            TokenKind::Minus => Terminal::Minus,
            TokenKind::Mul => Terminal::Mul,
            TokenKind::Mod => Terminal::Mod,
            TokenKind::Div => Terminal::Div,
            TokenKind::Exp => Terminal::Exp,
            TokenKind::BeginParen => Terminal::BeginParen,
            TokenKind::EndParen => Terminal::EndParen,
            TokenKind::LessThan => Terminal::LessThan,
            TokenKind::GreaterThan => Terminal::GreaterThan,
            TokenKind::LessThanEq => Terminal::LessThanEq,
            TokenKind::GreaterThanEq => Terminal::GreaterThanEq,
            TokenKind::EqualTo => Terminal::EqualTo,
            TokenKind::NotEqualTo => Terminal::NotEqualTo,
            TokenKind::Not => Terminal::Not,
            TokenKind::True => Terminal::True,
            TokenKind::False => Terminal::False,
            TokenKind::If => Terminal::If,
            TokenKind::Then => Terminal::Then,
            TokenKind::Else => Terminal::Else,
            TokenKind::Match => Terminal::Match,
            TokenKind::Case => Terminal::Case,
            TokenKind::Arrow => Terminal::Arrow,
            TokenKind::BeginCurly => Terminal::BeginCurly,
            TokenKind::EndCurly => Terminal::EndCurly,
            TokenKind::SemiColon => Terminal::SemiColon,
            TokenKind::MatchAny => Terminal::MatchAny,
        };
        self.res_stack.push(Symbol::Terminal(val));
    }
    fn reduce_action(
        &mut self,
        context: &mut Context<'i, Input>,
        prod: ProdKind,
        _prod_len: usize,
    ) {
        let prod = match prod {
            ProdKind::ExprP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::SequenceExpr(p0)) => {
                        NonTerminal::Expr(
                            calculator_actions::expr_sequence_expr(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::SequenceExprP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::TupleExpr1(p0)) => {
                        NonTerminal::SequenceExpr(
                            calculator_actions::sequence_expr_tuple_expr1(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::TupleExpr1P1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::TupleExpr1(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::TupleExpr(p1)),
                    ) => {
                        NonTerminal::TupleExpr1(
                            calculator_actions::tuple_expr1_c1(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::TupleExpr1P2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::TupleExpr(p0)) => {
                        NonTerminal::TupleExpr1(
                            calculator_actions::tuple_expr1_tuple_expr(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::TupleExprP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::ConditionalExpr1(p0)) => {
                        NonTerminal::TupleExpr(
                            calculator_actions::tuple_expr_conditional_expr1(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ConditionalExpr1P1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::ConditionalExpr1(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::ConditionalExpr(p1)),
                    ) => {
                        NonTerminal::ConditionalExpr1(
                            calculator_actions::conditional_expr1_c1(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ConditionalExpr1P2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::ConditionalExpr(p0)) => {
                        NonTerminal::ConditionalExpr1(
                            calculator_actions::conditional_expr1_conditional_expr(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::PatternP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Literal(p0)) => {
                        NonTerminal::Pattern(
                            calculator_actions::pattern_literal(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::PatternP2 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::Pattern(calculator_actions::pattern_match_any(context))
            }
            ProdKind::CaseMatchP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 4usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        _,
                        Symbol::NonTerminal(NonTerminal::Pattern(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::BinaryExpr(p1)),
                    ) => {
                        NonTerminal::CaseMatch(
                            calculator_actions::case_match_c1(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::CaseArmsP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::CaseMatch1(p0)) => {
                        NonTerminal::CaseArms(
                            calculator_actions::case_arms_case_match1(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::CaseMatch1P1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::CaseMatch1(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::CaseMatch(p1)),
                    ) => {
                        NonTerminal::CaseMatch1(
                            calculator_actions::case_match1_c1(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::CaseMatch1P2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::CaseMatch(p0)) => {
                        NonTerminal::CaseMatch1(
                            calculator_actions::case_match1_case_match(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ConditionalExprP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::BinaryExpr(p0)) => {
                        NonTerminal::ConditionalExpr(
                            calculator_actions::conditional_expr_binary_expr(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ConditionalExprIfThenElseExpr => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 6usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        _,
                        Symbol::NonTerminal(NonTerminal::BinaryExpr(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::BinaryExpr(p1)),
                        _,
                        Symbol::NonTerminal(NonTerminal::BinaryExpr(p2)),
                    ) => {
                        NonTerminal::ConditionalExpr(
                            calculator_actions::conditional_expr_if_then_else_expr(
                                &*context,
                                p0,
                                p1,
                                p2,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ConditionalExprP3 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 5usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        _,
                        Symbol::NonTerminal(NonTerminal::BinaryExpr(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::CaseArms(p1)),
                        _,
                    ) => {
                        NonTerminal::ConditionalExpr(
                            calculator_actions::conditional_expr_c3(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::BinaryExprP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::UnaryExpr(p0)) => {
                        NonTerminal::BinaryExpr(
                            calculator_actions::binary_expr_unary_expr(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::BinaryExprLogicalOrExpr => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::BinaryExpr(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::BinaryExpr(p1)),
                    ) => {
                        NonTerminal::BinaryExpr(
                            calculator_actions::binary_expr_logical_or_expr(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::BinaryExprLogicalAndExpr => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::BinaryExpr(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::BinaryExpr(p1)),
                    ) => {
                        NonTerminal::BinaryExpr(
                            calculator_actions::binary_expr_logical_and_expr(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::BinaryExprEqExpr => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::BinaryExpr(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::BinaryExpr(p1)),
                    ) => {
                        NonTerminal::BinaryExpr(
                            calculator_actions::binary_expr_eq_expr(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::BinaryExprNotEqExpr => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::BinaryExpr(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::BinaryExpr(p1)),
                    ) => {
                        NonTerminal::BinaryExpr(
                            calculator_actions::binary_expr_not_eq_expr(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::BinaryExprLTExpr => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::BinaryExpr(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::BinaryExpr(p1)),
                    ) => {
                        NonTerminal::BinaryExpr(
                            calculator_actions::binary_expr_ltexpr(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::BinaryExprGTExpr => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::BinaryExpr(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::BinaryExpr(p1)),
                    ) => {
                        NonTerminal::BinaryExpr(
                            calculator_actions::binary_expr_gtexpr(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::BinaryExprLTEqExpr => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::BinaryExpr(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::BinaryExpr(p1)),
                    ) => {
                        NonTerminal::BinaryExpr(
                            calculator_actions::binary_expr_lteq_expr(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::BinaryExprGTEqExpr => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::BinaryExpr(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::BinaryExpr(p1)),
                    ) => {
                        NonTerminal::BinaryExpr(
                            calculator_actions::binary_expr_gteq_expr(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::BinaryExprAddExpr => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::BinaryExpr(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::BinaryExpr(p1)),
                    ) => {
                        NonTerminal::BinaryExpr(
                            calculator_actions::binary_expr_add_expr(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::BinaryExprSubExpr => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::BinaryExpr(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::BinaryExpr(p1)),
                    ) => {
                        NonTerminal::BinaryExpr(
                            calculator_actions::binary_expr_sub_expr(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::BinaryExprMultExpr => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::BinaryExpr(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::BinaryExpr(p1)),
                    ) => {
                        NonTerminal::BinaryExpr(
                            calculator_actions::binary_expr_mult_expr(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::BinaryExprDivExpr => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::BinaryExpr(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::BinaryExpr(p1)),
                    ) => {
                        NonTerminal::BinaryExpr(
                            calculator_actions::binary_expr_div_expr(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::BinaryExprModExpr => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::BinaryExpr(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::BinaryExpr(p1)),
                    ) => {
                        NonTerminal::BinaryExpr(
                            calculator_actions::binary_expr_mod_expr(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::BinaryExprExpExpr => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::BinaryExpr(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::BinaryExpr(p1)),
                    ) => {
                        NonTerminal::BinaryExpr(
                            calculator_actions::binary_expr_exp_expr(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::UnaryExprP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Literal(p0)) => {
                        NonTerminal::UnaryExpr(
                            calculator_actions::unary_expr_literal(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::UnaryExprP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (_, Symbol::NonTerminal(NonTerminal::TupleExpr(p0)), _) => {
                        NonTerminal::UnaryExpr(
                            calculator_actions::unary_expr_tuple_expr(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::UnaryExprP3 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (_, Symbol::NonTerminal(NonTerminal::SequenceExpr(p0)), _) => {
                        NonTerminal::UnaryExpr(
                            calculator_actions::unary_expr_sequence_expr(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::UnaryExprUminusExpr => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (_, Symbol::NonTerminal(NonTerminal::UnaryExpr(p0))) => {
                        NonTerminal::UnaryExpr(
                            calculator_actions::unary_expr_uminus_expr(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::UnaryExprUplusExpr => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (_, Symbol::NonTerminal(NonTerminal::UnaryExpr(p0))) => {
                        NonTerminal::UnaryExpr(
                            calculator_actions::unary_expr_uplus_expr(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::UnaryExprNotExpr => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (_, Symbol::NonTerminal(NonTerminal::UnaryExpr(p0))) => {
                        NonTerminal::UnaryExpr(
                            calculator_actions::unary_expr_not_expr(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::LiteralP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::Number(p0)) => {
                        NonTerminal::Literal(
                            calculator_actions::literal_number(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::LiteralP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::Symbol(p0)) => {
                        NonTerminal::Literal(
                            calculator_actions::literal_symbol(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::LiteralP3 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::Literal(calculator_actions::literal_true(context))
            }
            ProdKind::LiteralP4 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::Literal(calculator_actions::literal_false(context))
            }
        };
        self.res_stack.push(Symbol::NonTerminal(prod));
    }
}
