
Expr:
   BinaryExpr				{Expr}
;

BinaryExpr:
   UnaryExpr				{Unary}
 | BinaryExpr '+' BinaryExpr		{Add, 1, left}
 | BinaryExpr '-' BinaryExpr		{Sub, 1, left}
 | BinaryExpr '*' BinaryExpr		{Mult, 2, left}
 | BinaryExpr '/' BinaryExpr		{Div, 2, left}
 | BinaryExpr '^' BinaryExpr		{Exp, 3, right}
;

UnaryExpr:
   PrimaryExpr				{Primary}
 | '(' Expr ')'			        {Paren}
 | '-' UnaryExpr			{Uminus}
;

PrimaryExpr:
   Literal                              {Literal}
 | Symbol				{Symbol}
 | Symbol '(' Expr ')'			{FunCall1}
 | Symbol '(' Expr ',' Expr ')'		{FunCall2}
;

Literal:
   Number				{Number}
;

terminals
Number: /\d+/;
Symbol: /[\w--\d]\w*/;
Plus: '+';
Minus: '-';
Mul: '*';
Div: '/';
Exp: '^';
BeginParen: '(';
EndParen: ')';
Comma: ',';
