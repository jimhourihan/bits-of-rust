/// Generated by rustemo. Do not edit manually!
use std::fmt::Debug;
use std::hash::Hash;
use rustemo::{
    Result, Input as InputT, Lexer, Token, TokenRecognizer as TokenRecognizerT, Parser,
    ParserDefinition, State as StateT, Builder,
};
use regex::Regex;
use once_cell::sync::Lazy;
use rustemo::StringLexer;
use rustemo::LRBuilder;
use std::cell::RefCell;
use rustemo::{LRParser, LRContext};
use rustemo::Action::{self, Shift, Reduce, Accept};
#[allow(unused_imports)]
use rustemo::debug::{log, logn};
#[allow(unused_imports)]
#[cfg(debug_assertions)]
use colored::*;
pub type Input = str;
const STATE_COUNT: usize = 29usize;
const MAX_RECOGNIZERS: usize = 9usize;
#[allow(dead_code)]
const TERMINAL_COUNT: usize = 11usize;
#[allow(clippy::upper_case_acronyms)]
#[derive(Debug, Default, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub enum TokenKind {
    #[default]
    STOP,
    Number,
    Symbol,
    Plus,
    Minus,
    Mul,
    Div,
    Exp,
    BeginParen,
    EndParen,
    Comma,
}
use TokenKind as TK;
impl From<TokenKind> for usize {
    fn from(t: TokenKind) -> Self {
        t as usize
    }
}
#[allow(clippy::enum_variant_names)]
#[derive(Clone, Copy, PartialEq)]
pub enum ProdKind {
    ExprExpr,
    BinaryExprUnary,
    BinaryExprAdd,
    BinaryExprSub,
    BinaryExprMult,
    BinaryExprDiv,
    BinaryExprExp,
    UnaryExprPrimary,
    UnaryExprParen,
    UnaryExprUminus,
    PrimaryExprLiteral,
    PrimaryExprSymbol,
    PrimaryExprFunCall1,
    PrimaryExprFunCall2,
    LiteralNumber,
}
use ProdKind as PK;
impl std::fmt::Debug for ProdKind {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let name = match self {
            ProdKind::ExprExpr => "Expr: BinaryExpr",
            ProdKind::BinaryExprUnary => "BinaryExpr: UnaryExpr",
            ProdKind::BinaryExprAdd => "BinaryExpr: BinaryExpr Plus BinaryExpr",
            ProdKind::BinaryExprSub => "BinaryExpr: BinaryExpr Minus BinaryExpr",
            ProdKind::BinaryExprMult => "BinaryExpr: BinaryExpr Mul BinaryExpr",
            ProdKind::BinaryExprDiv => "BinaryExpr: BinaryExpr Div BinaryExpr",
            ProdKind::BinaryExprExp => "BinaryExpr: BinaryExpr Exp BinaryExpr",
            ProdKind::UnaryExprPrimary => "UnaryExpr: PrimaryExpr",
            ProdKind::UnaryExprParen => "UnaryExpr: BeginParen Expr EndParen",
            ProdKind::UnaryExprUminus => "UnaryExpr: Minus UnaryExpr",
            ProdKind::PrimaryExprLiteral => "PrimaryExpr: Literal",
            ProdKind::PrimaryExprSymbol => "PrimaryExpr: Symbol",
            ProdKind::PrimaryExprFunCall1 => {
                "PrimaryExpr: Symbol BeginParen Expr EndParen"
            }
            ProdKind::PrimaryExprFunCall2 => {
                "PrimaryExpr: Symbol BeginParen Expr Comma Expr EndParen"
            }
            ProdKind::LiteralNumber => "Literal: Number",
        };
        write!(f, "{}", name)
    }
}
#[allow(clippy::upper_case_acronyms)]
#[allow(dead_code)]
#[derive(Clone, Copy, Debug)]
pub enum NonTermKind {
    EMPTY,
    AUG,
    Expr,
    BinaryExpr,
    UnaryExpr,
    PrimaryExpr,
    Literal,
}
impl From<ProdKind> for NonTermKind {
    fn from(prod: ProdKind) -> Self {
        match prod {
            ProdKind::ExprExpr => NonTermKind::Expr,
            ProdKind::BinaryExprUnary => NonTermKind::BinaryExpr,
            ProdKind::BinaryExprAdd => NonTermKind::BinaryExpr,
            ProdKind::BinaryExprSub => NonTermKind::BinaryExpr,
            ProdKind::BinaryExprMult => NonTermKind::BinaryExpr,
            ProdKind::BinaryExprDiv => NonTermKind::BinaryExpr,
            ProdKind::BinaryExprExp => NonTermKind::BinaryExpr,
            ProdKind::UnaryExprPrimary => NonTermKind::UnaryExpr,
            ProdKind::UnaryExprParen => NonTermKind::UnaryExpr,
            ProdKind::UnaryExprUminus => NonTermKind::UnaryExpr,
            ProdKind::PrimaryExprLiteral => NonTermKind::PrimaryExpr,
            ProdKind::PrimaryExprSymbol => NonTermKind::PrimaryExpr,
            ProdKind::PrimaryExprFunCall1 => NonTermKind::PrimaryExpr,
            ProdKind::PrimaryExprFunCall2 => NonTermKind::PrimaryExpr,
            ProdKind::LiteralNumber => NonTermKind::Literal,
        }
    }
}
#[allow(clippy::enum_variant_names)]
#[derive(Default, Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]
pub enum State {
    #[default]
    AUGS0,
    NumberS1,
    SymbolS2,
    MinusS3,
    BeginParenS4,
    ExprS5,
    BinaryExprS6,
    UnaryExprS7,
    PrimaryExprS8,
    LiteralS9,
    BeginParenS10,
    UnaryExprS11,
    ExprS12,
    PlusS13,
    MinusS14,
    MulS15,
    DivS16,
    ExpS17,
    ExprS18,
    EndParenS19,
    BinaryExprS20,
    BinaryExprS21,
    BinaryExprS22,
    BinaryExprS23,
    BinaryExprS24,
    EndParenS25,
    CommaS26,
    ExprS27,
    EndParenS28,
}
impl StateT for State {
    fn default_layout() -> Option<Self> {
        None
    }
}
impl From<State> for usize {
    fn from(s: State) -> Self {
        s as usize
    }
}
impl std::fmt::Debug for State {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let name = match self {
            State::AUGS0 => "0:AUG",
            State::NumberS1 => "1:Number",
            State::SymbolS2 => "2:Symbol",
            State::MinusS3 => "3:Minus",
            State::BeginParenS4 => "4:BeginParen",
            State::ExprS5 => "5:Expr",
            State::BinaryExprS6 => "6:BinaryExpr",
            State::UnaryExprS7 => "7:UnaryExpr",
            State::PrimaryExprS8 => "8:PrimaryExpr",
            State::LiteralS9 => "9:Literal",
            State::BeginParenS10 => "10:BeginParen",
            State::UnaryExprS11 => "11:UnaryExpr",
            State::ExprS12 => "12:Expr",
            State::PlusS13 => "13:Plus",
            State::MinusS14 => "14:Minus",
            State::MulS15 => "15:Mul",
            State::DivS16 => "16:Div",
            State::ExpS17 => "17:Exp",
            State::ExprS18 => "18:Expr",
            State::EndParenS19 => "19:EndParen",
            State::BinaryExprS20 => "20:BinaryExpr",
            State::BinaryExprS21 => "21:BinaryExpr",
            State::BinaryExprS22 => "22:BinaryExpr",
            State::BinaryExprS23 => "23:BinaryExpr",
            State::BinaryExprS24 => "24:BinaryExpr",
            State::EndParenS25 => "25:EndParen",
            State::CommaS26 => "26:Comma",
            State::ExprS27 => "27:Expr",
            State::EndParenS28 => "28:EndParen",
        };
        write!(f, "{name}")
    }
}
type ActionFn = fn(token: TokenKind) -> Vec<Action<State, ProdKind>>;
pub struct CalculatorParserDefinition {
    actions: [ActionFn; STATE_COUNT],
    gotos: [fn(nonterm: NonTermKind) -> State; STATE_COUNT],
    token_kinds: [[Option<(TokenKind, bool)>; MAX_RECOGNIZERS]; STATE_COUNT],
}
fn action_aug_s0(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Number => Vec::from(&[Shift(State::NumberS1)]),
        TK::Symbol => Vec::from(&[Shift(State::SymbolS2)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS3)]),
        TK::BeginParen => Vec::from(&[Shift(State::BeginParenS4)]),
        _ => vec![],
    }
}
fn action_number_s1(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::LiteralNumber, 1usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::LiteralNumber, 1usize)]),
        TK::Minus => Vec::from(&[Reduce(PK::LiteralNumber, 1usize)]),
        TK::Mul => Vec::from(&[Reduce(PK::LiteralNumber, 1usize)]),
        TK::Div => Vec::from(&[Reduce(PK::LiteralNumber, 1usize)]),
        TK::Exp => Vec::from(&[Reduce(PK::LiteralNumber, 1usize)]),
        TK::EndParen => Vec::from(&[Reduce(PK::LiteralNumber, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::LiteralNumber, 1usize)]),
        _ => vec![],
    }
}
fn action_symbol_s2(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::PrimaryExprSymbol, 1usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::PrimaryExprSymbol, 1usize)]),
        TK::Minus => Vec::from(&[Reduce(PK::PrimaryExprSymbol, 1usize)]),
        TK::Mul => Vec::from(&[Reduce(PK::PrimaryExprSymbol, 1usize)]),
        TK::Div => Vec::from(&[Reduce(PK::PrimaryExprSymbol, 1usize)]),
        TK::Exp => Vec::from(&[Reduce(PK::PrimaryExprSymbol, 1usize)]),
        TK::BeginParen => Vec::from(&[Shift(State::BeginParenS10)]),
        TK::EndParen => Vec::from(&[Reduce(PK::PrimaryExprSymbol, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::PrimaryExprSymbol, 1usize)]),
        _ => vec![],
    }
}
fn action_minus_s3(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Number => Vec::from(&[Shift(State::NumberS1)]),
        TK::Symbol => Vec::from(&[Shift(State::SymbolS2)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS3)]),
        TK::BeginParen => Vec::from(&[Shift(State::BeginParenS4)]),
        _ => vec![],
    }
}
fn action_beginparen_s4(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Number => Vec::from(&[Shift(State::NumberS1)]),
        TK::Symbol => Vec::from(&[Shift(State::SymbolS2)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS3)]),
        TK::BeginParen => Vec::from(&[Shift(State::BeginParenS4)]),
        _ => vec![],
    }
}
fn action_expr_s5(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Accept]),
        _ => vec![],
    }
}
fn action_binaryexpr_s6(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::ExprExpr, 1usize)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS13)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS14)]),
        TK::Mul => Vec::from(&[Shift(State::MulS15)]),
        TK::Div => Vec::from(&[Shift(State::DivS16)]),
        TK::Exp => Vec::from(&[Shift(State::ExpS17)]),
        TK::EndParen => Vec::from(&[Reduce(PK::ExprExpr, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::ExprExpr, 1usize)]),
        _ => vec![],
    }
}
fn action_unaryexpr_s7(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::BinaryExprUnary, 1usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::BinaryExprUnary, 1usize)]),
        TK::Minus => Vec::from(&[Reduce(PK::BinaryExprUnary, 1usize)]),
        TK::Mul => Vec::from(&[Reduce(PK::BinaryExprUnary, 1usize)]),
        TK::Div => Vec::from(&[Reduce(PK::BinaryExprUnary, 1usize)]),
        TK::Exp => Vec::from(&[Reduce(PK::BinaryExprUnary, 1usize)]),
        TK::EndParen => Vec::from(&[Reduce(PK::BinaryExprUnary, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::BinaryExprUnary, 1usize)]),
        _ => vec![],
    }
}
fn action_primaryexpr_s8(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::UnaryExprPrimary, 1usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::UnaryExprPrimary, 1usize)]),
        TK::Minus => Vec::from(&[Reduce(PK::UnaryExprPrimary, 1usize)]),
        TK::Mul => Vec::from(&[Reduce(PK::UnaryExprPrimary, 1usize)]),
        TK::Div => Vec::from(&[Reduce(PK::UnaryExprPrimary, 1usize)]),
        TK::Exp => Vec::from(&[Reduce(PK::UnaryExprPrimary, 1usize)]),
        TK::EndParen => Vec::from(&[Reduce(PK::UnaryExprPrimary, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::UnaryExprPrimary, 1usize)]),
        _ => vec![],
    }
}
fn action_literal_s9(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::PrimaryExprLiteral, 1usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::PrimaryExprLiteral, 1usize)]),
        TK::Minus => Vec::from(&[Reduce(PK::PrimaryExprLiteral, 1usize)]),
        TK::Mul => Vec::from(&[Reduce(PK::PrimaryExprLiteral, 1usize)]),
        TK::Div => Vec::from(&[Reduce(PK::PrimaryExprLiteral, 1usize)]),
        TK::Exp => Vec::from(&[Reduce(PK::PrimaryExprLiteral, 1usize)]),
        TK::EndParen => Vec::from(&[Reduce(PK::PrimaryExprLiteral, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::PrimaryExprLiteral, 1usize)]),
        _ => vec![],
    }
}
fn action_beginparen_s10(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Number => Vec::from(&[Shift(State::NumberS1)]),
        TK::Symbol => Vec::from(&[Shift(State::SymbolS2)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS3)]),
        TK::BeginParen => Vec::from(&[Shift(State::BeginParenS4)]),
        _ => vec![],
    }
}
fn action_unaryexpr_s11(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::UnaryExprUminus, 2usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::UnaryExprUminus, 2usize)]),
        TK::Minus => Vec::from(&[Reduce(PK::UnaryExprUminus, 2usize)]),
        TK::Mul => Vec::from(&[Reduce(PK::UnaryExprUminus, 2usize)]),
        TK::Div => Vec::from(&[Reduce(PK::UnaryExprUminus, 2usize)]),
        TK::Exp => Vec::from(&[Reduce(PK::UnaryExprUminus, 2usize)]),
        TK::EndParen => Vec::from(&[Reduce(PK::UnaryExprUminus, 2usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::UnaryExprUminus, 2usize)]),
        _ => vec![],
    }
}
fn action_expr_s12(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::EndParen => Vec::from(&[Shift(State::EndParenS19)]),
        _ => vec![],
    }
}
fn action_plus_s13(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Number => Vec::from(&[Shift(State::NumberS1)]),
        TK::Symbol => Vec::from(&[Shift(State::SymbolS2)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS3)]),
        TK::BeginParen => Vec::from(&[Shift(State::BeginParenS4)]),
        _ => vec![],
    }
}
fn action_minus_s14(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Number => Vec::from(&[Shift(State::NumberS1)]),
        TK::Symbol => Vec::from(&[Shift(State::SymbolS2)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS3)]),
        TK::BeginParen => Vec::from(&[Shift(State::BeginParenS4)]),
        _ => vec![],
    }
}
fn action_mul_s15(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Number => Vec::from(&[Shift(State::NumberS1)]),
        TK::Symbol => Vec::from(&[Shift(State::SymbolS2)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS3)]),
        TK::BeginParen => Vec::from(&[Shift(State::BeginParenS4)]),
        _ => vec![],
    }
}
fn action_div_s16(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Number => Vec::from(&[Shift(State::NumberS1)]),
        TK::Symbol => Vec::from(&[Shift(State::SymbolS2)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS3)]),
        TK::BeginParen => Vec::from(&[Shift(State::BeginParenS4)]),
        _ => vec![],
    }
}
fn action_exp_s17(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Number => Vec::from(&[Shift(State::NumberS1)]),
        TK::Symbol => Vec::from(&[Shift(State::SymbolS2)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS3)]),
        TK::BeginParen => Vec::from(&[Shift(State::BeginParenS4)]),
        _ => vec![],
    }
}
fn action_expr_s18(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::EndParen => Vec::from(&[Shift(State::EndParenS25)]),
        TK::Comma => Vec::from(&[Shift(State::CommaS26)]),
        _ => vec![],
    }
}
fn action_endparen_s19(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::UnaryExprParen, 3usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::UnaryExprParen, 3usize)]),
        TK::Minus => Vec::from(&[Reduce(PK::UnaryExprParen, 3usize)]),
        TK::Mul => Vec::from(&[Reduce(PK::UnaryExprParen, 3usize)]),
        TK::Div => Vec::from(&[Reduce(PK::UnaryExprParen, 3usize)]),
        TK::Exp => Vec::from(&[Reduce(PK::UnaryExprParen, 3usize)]),
        TK::EndParen => Vec::from(&[Reduce(PK::UnaryExprParen, 3usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::UnaryExprParen, 3usize)]),
        _ => vec![],
    }
}
fn action_binaryexpr_s20(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::BinaryExprAdd, 3usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::BinaryExprAdd, 3usize)]),
        TK::Minus => Vec::from(&[Reduce(PK::BinaryExprAdd, 3usize)]),
        TK::Mul => Vec::from(&[Shift(State::MulS15)]),
        TK::Div => Vec::from(&[Shift(State::DivS16)]),
        TK::Exp => Vec::from(&[Shift(State::ExpS17)]),
        TK::EndParen => Vec::from(&[Reduce(PK::BinaryExprAdd, 3usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::BinaryExprAdd, 3usize)]),
        _ => vec![],
    }
}
fn action_binaryexpr_s21(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::BinaryExprSub, 3usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::BinaryExprSub, 3usize)]),
        TK::Minus => Vec::from(&[Reduce(PK::BinaryExprSub, 3usize)]),
        TK::Mul => Vec::from(&[Shift(State::MulS15)]),
        TK::Div => Vec::from(&[Shift(State::DivS16)]),
        TK::Exp => Vec::from(&[Shift(State::ExpS17)]),
        TK::EndParen => Vec::from(&[Reduce(PK::BinaryExprSub, 3usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::BinaryExprSub, 3usize)]),
        _ => vec![],
    }
}
fn action_binaryexpr_s22(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::BinaryExprMult, 3usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::BinaryExprMult, 3usize)]),
        TK::Minus => Vec::from(&[Reduce(PK::BinaryExprMult, 3usize)]),
        TK::Mul => Vec::from(&[Reduce(PK::BinaryExprMult, 3usize)]),
        TK::Div => Vec::from(&[Reduce(PK::BinaryExprMult, 3usize)]),
        TK::Exp => Vec::from(&[Shift(State::ExpS17)]),
        TK::EndParen => Vec::from(&[Reduce(PK::BinaryExprMult, 3usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::BinaryExprMult, 3usize)]),
        _ => vec![],
    }
}
fn action_binaryexpr_s23(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::BinaryExprDiv, 3usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::BinaryExprDiv, 3usize)]),
        TK::Minus => Vec::from(&[Reduce(PK::BinaryExprDiv, 3usize)]),
        TK::Mul => Vec::from(&[Reduce(PK::BinaryExprDiv, 3usize)]),
        TK::Div => Vec::from(&[Reduce(PK::BinaryExprDiv, 3usize)]),
        TK::Exp => Vec::from(&[Shift(State::ExpS17)]),
        TK::EndParen => Vec::from(&[Reduce(PK::BinaryExprDiv, 3usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::BinaryExprDiv, 3usize)]),
        _ => vec![],
    }
}
fn action_binaryexpr_s24(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::BinaryExprExp, 3usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::BinaryExprExp, 3usize)]),
        TK::Minus => Vec::from(&[Reduce(PK::BinaryExprExp, 3usize)]),
        TK::Mul => Vec::from(&[Reduce(PK::BinaryExprExp, 3usize)]),
        TK::Div => Vec::from(&[Reduce(PK::BinaryExprExp, 3usize)]),
        TK::Exp => Vec::from(&[Shift(State::ExpS17)]),
        TK::EndParen => Vec::from(&[Reduce(PK::BinaryExprExp, 3usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::BinaryExprExp, 3usize)]),
        _ => vec![],
    }
}
fn action_endparen_s25(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::PrimaryExprFunCall1, 4usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::PrimaryExprFunCall1, 4usize)]),
        TK::Minus => Vec::from(&[Reduce(PK::PrimaryExprFunCall1, 4usize)]),
        TK::Mul => Vec::from(&[Reduce(PK::PrimaryExprFunCall1, 4usize)]),
        TK::Div => Vec::from(&[Reduce(PK::PrimaryExprFunCall1, 4usize)]),
        TK::Exp => Vec::from(&[Reduce(PK::PrimaryExprFunCall1, 4usize)]),
        TK::EndParen => Vec::from(&[Reduce(PK::PrimaryExprFunCall1, 4usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::PrimaryExprFunCall1, 4usize)]),
        _ => vec![],
    }
}
fn action_comma_s26(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Number => Vec::from(&[Shift(State::NumberS1)]),
        TK::Symbol => Vec::from(&[Shift(State::SymbolS2)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS3)]),
        TK::BeginParen => Vec::from(&[Shift(State::BeginParenS4)]),
        _ => vec![],
    }
}
fn action_expr_s27(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::EndParen => Vec::from(&[Shift(State::EndParenS28)]),
        _ => vec![],
    }
}
fn action_endparen_s28(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::PrimaryExprFunCall2, 6usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::PrimaryExprFunCall2, 6usize)]),
        TK::Minus => Vec::from(&[Reduce(PK::PrimaryExprFunCall2, 6usize)]),
        TK::Mul => Vec::from(&[Reduce(PK::PrimaryExprFunCall2, 6usize)]),
        TK::Div => Vec::from(&[Reduce(PK::PrimaryExprFunCall2, 6usize)]),
        TK::Exp => Vec::from(&[Reduce(PK::PrimaryExprFunCall2, 6usize)]),
        TK::EndParen => Vec::from(&[Reduce(PK::PrimaryExprFunCall2, 6usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::PrimaryExprFunCall2, 6usize)]),
        _ => vec![],
    }
}
fn goto_aug_s0(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expr => State::ExprS5,
        NonTermKind::BinaryExpr => State::BinaryExprS6,
        NonTermKind::UnaryExpr => State::UnaryExprS7,
        NonTermKind::PrimaryExpr => State::PrimaryExprS8,
        NonTermKind::Literal => State::LiteralS9,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::AUGS0
            )
        }
    }
}
fn goto_minus_s3(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::UnaryExpr => State::UnaryExprS11,
        NonTermKind::PrimaryExpr => State::PrimaryExprS8,
        NonTermKind::Literal => State::LiteralS9,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::MinusS3
            )
        }
    }
}
fn goto_beginparen_s4(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expr => State::ExprS12,
        NonTermKind::BinaryExpr => State::BinaryExprS6,
        NonTermKind::UnaryExpr => State::UnaryExprS7,
        NonTermKind::PrimaryExpr => State::PrimaryExprS8,
        NonTermKind::Literal => State::LiteralS9,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::BeginParenS4
            )
        }
    }
}
fn goto_beginparen_s10(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expr => State::ExprS18,
        NonTermKind::BinaryExpr => State::BinaryExprS6,
        NonTermKind::UnaryExpr => State::UnaryExprS7,
        NonTermKind::PrimaryExpr => State::PrimaryExprS8,
        NonTermKind::Literal => State::LiteralS9,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::BeginParenS10
            )
        }
    }
}
fn goto_plus_s13(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::BinaryExpr => State::BinaryExprS20,
        NonTermKind::UnaryExpr => State::UnaryExprS7,
        NonTermKind::PrimaryExpr => State::PrimaryExprS8,
        NonTermKind::Literal => State::LiteralS9,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::PlusS13
            )
        }
    }
}
fn goto_minus_s14(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::BinaryExpr => State::BinaryExprS21,
        NonTermKind::UnaryExpr => State::UnaryExprS7,
        NonTermKind::PrimaryExpr => State::PrimaryExprS8,
        NonTermKind::Literal => State::LiteralS9,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::MinusS14
            )
        }
    }
}
fn goto_mul_s15(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::BinaryExpr => State::BinaryExprS22,
        NonTermKind::UnaryExpr => State::UnaryExprS7,
        NonTermKind::PrimaryExpr => State::PrimaryExprS8,
        NonTermKind::Literal => State::LiteralS9,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::MulS15
            )
        }
    }
}
fn goto_div_s16(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::BinaryExpr => State::BinaryExprS23,
        NonTermKind::UnaryExpr => State::UnaryExprS7,
        NonTermKind::PrimaryExpr => State::PrimaryExprS8,
        NonTermKind::Literal => State::LiteralS9,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::DivS16
            )
        }
    }
}
fn goto_exp_s17(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::BinaryExpr => State::BinaryExprS24,
        NonTermKind::UnaryExpr => State::UnaryExprS7,
        NonTermKind::PrimaryExpr => State::PrimaryExprS8,
        NonTermKind::Literal => State::LiteralS9,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::ExpS17
            )
        }
    }
}
fn goto_comma_s26(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expr => State::ExprS27,
        NonTermKind::BinaryExpr => State::BinaryExprS6,
        NonTermKind::UnaryExpr => State::UnaryExprS7,
        NonTermKind::PrimaryExpr => State::PrimaryExprS8,
        NonTermKind::Literal => State::LiteralS9,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::CommaS26
            )
        }
    }
}
fn goto_invalid(_nonterm_kind: NonTermKind) -> State {
    panic!("Invalid GOTO entry!");
}
pub(crate) static PARSER_DEFINITION: CalculatorParserDefinition = CalculatorParserDefinition {
    actions: [
        action_aug_s0,
        action_number_s1,
        action_symbol_s2,
        action_minus_s3,
        action_beginparen_s4,
        action_expr_s5,
        action_binaryexpr_s6,
        action_unaryexpr_s7,
        action_primaryexpr_s8,
        action_literal_s9,
        action_beginparen_s10,
        action_unaryexpr_s11,
        action_expr_s12,
        action_plus_s13,
        action_minus_s14,
        action_mul_s15,
        action_div_s16,
        action_exp_s17,
        action_expr_s18,
        action_endparen_s19,
        action_binaryexpr_s20,
        action_binaryexpr_s21,
        action_binaryexpr_s22,
        action_binaryexpr_s23,
        action_binaryexpr_s24,
        action_endparen_s25,
        action_comma_s26,
        action_expr_s27,
        action_endparen_s28,
    ],
    gotos: [
        goto_aug_s0,
        goto_invalid,
        goto_invalid,
        goto_minus_s3,
        goto_beginparen_s4,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_beginparen_s10,
        goto_invalid,
        goto_invalid,
        goto_plus_s13,
        goto_minus_s14,
        goto_mul_s15,
        goto_div_s16,
        goto_exp_s17,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_comma_s26,
        goto_invalid,
        goto_invalid,
    ],
    token_kinds: [
        [
            Some((TK::Minus, true)),
            Some((TK::BeginParen, true)),
            Some((TK::Number, false)),
            Some((TK::Symbol, false)),
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::Mul, true)),
            Some((TK::Div, true)),
            Some((TK::Exp, true)),
            Some((TK::EndParen, true)),
            Some((TK::Comma, true)),
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::Mul, true)),
            Some((TK::Div, true)),
            Some((TK::Exp, true)),
            Some((TK::BeginParen, true)),
            Some((TK::EndParen, true)),
            Some((TK::Comma, true)),
        ],
        [
            Some((TK::Minus, true)),
            Some((TK::BeginParen, true)),
            Some((TK::Number, false)),
            Some((TK::Symbol, false)),
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Minus, true)),
            Some((TK::BeginParen, true)),
            Some((TK::Number, false)),
            Some((TK::Symbol, false)),
            None,
            None,
            None,
            None,
            None,
        ],
        [Some((TK::STOP, false)), None, None, None, None, None, None, None, None],
        [
            Some((TK::STOP, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::Mul, true)),
            Some((TK::Div, true)),
            Some((TK::Exp, true)),
            Some((TK::EndParen, true)),
            Some((TK::Comma, true)),
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::Mul, true)),
            Some((TK::Div, true)),
            Some((TK::Exp, true)),
            Some((TK::EndParen, true)),
            Some((TK::Comma, true)),
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::Mul, true)),
            Some((TK::Div, true)),
            Some((TK::Exp, true)),
            Some((TK::EndParen, true)),
            Some((TK::Comma, true)),
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::Mul, true)),
            Some((TK::Div, true)),
            Some((TK::Exp, true)),
            Some((TK::EndParen, true)),
            Some((TK::Comma, true)),
            None,
        ],
        [
            Some((TK::Minus, true)),
            Some((TK::BeginParen, true)),
            Some((TK::Number, false)),
            Some((TK::Symbol, false)),
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::Mul, true)),
            Some((TK::Div, true)),
            Some((TK::Exp, true)),
            Some((TK::EndParen, true)),
            Some((TK::Comma, true)),
            None,
        ],
        [Some((TK::EndParen, true)), None, None, None, None, None, None, None, None],
        [
            Some((TK::Minus, true)),
            Some((TK::BeginParen, true)),
            Some((TK::Number, false)),
            Some((TK::Symbol, false)),
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Minus, true)),
            Some((TK::BeginParen, true)),
            Some((TK::Number, false)),
            Some((TK::Symbol, false)),
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Minus, true)),
            Some((TK::BeginParen, true)),
            Some((TK::Number, false)),
            Some((TK::Symbol, false)),
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Minus, true)),
            Some((TK::BeginParen, true)),
            Some((TK::Number, false)),
            Some((TK::Symbol, false)),
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Minus, true)),
            Some((TK::BeginParen, true)),
            Some((TK::Number, false)),
            Some((TK::Symbol, false)),
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::EndParen, true)),
            Some((TK::Comma, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::Mul, true)),
            Some((TK::Div, true)),
            Some((TK::Exp, true)),
            Some((TK::EndParen, true)),
            Some((TK::Comma, true)),
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::Mul, true)),
            Some((TK::Div, true)),
            Some((TK::Exp, true)),
            Some((TK::EndParen, true)),
            Some((TK::Comma, true)),
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::Mul, true)),
            Some((TK::Div, true)),
            Some((TK::Exp, true)),
            Some((TK::EndParen, true)),
            Some((TK::Comma, true)),
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::Mul, true)),
            Some((TK::Div, true)),
            Some((TK::Exp, true)),
            Some((TK::EndParen, true)),
            Some((TK::Comma, true)),
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::Mul, true)),
            Some((TK::Div, true)),
            Some((TK::Exp, true)),
            Some((TK::EndParen, true)),
            Some((TK::Comma, true)),
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::Mul, true)),
            Some((TK::Div, true)),
            Some((TK::Exp, true)),
            Some((TK::EndParen, true)),
            Some((TK::Comma, true)),
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::Mul, true)),
            Some((TK::Div, true)),
            Some((TK::Exp, true)),
            Some((TK::EndParen, true)),
            Some((TK::Comma, true)),
            None,
        ],
        [
            Some((TK::Minus, true)),
            Some((TK::BeginParen, true)),
            Some((TK::Number, false)),
            Some((TK::Symbol, false)),
            None,
            None,
            None,
            None,
            None,
        ],
        [Some((TK::EndParen, true)), None, None, None, None, None, None, None, None],
        [
            Some((TK::STOP, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::Mul, true)),
            Some((TK::Div, true)),
            Some((TK::Exp, true)),
            Some((TK::EndParen, true)),
            Some((TK::Comma, true)),
            None,
        ],
    ],
};
impl ParserDefinition<State, ProdKind, TokenKind, NonTermKind>
for CalculatorParserDefinition {
    fn actions(&self, state: State, token: TokenKind) -> Vec<Action<State, ProdKind>> {
        PARSER_DEFINITION.actions[state as usize](token)
    }
    fn goto(&self, state: State, nonterm: NonTermKind) -> State {
        PARSER_DEFINITION.gotos[state as usize](nonterm)
    }
    fn expected_token_kinds(&self, state: State) -> Vec<(TokenKind, bool)> {
        PARSER_DEFINITION.token_kinds[state as usize].iter().map_while(|t| *t).collect()
    }
    fn longest_match() -> bool {
        true
    }
    fn grammar_order() -> bool {
        true
    }
}
pub(crate) type Context<'i, I> = LRContext<'i, I, State, TokenKind>;
pub struct CalculatorParser<
    'i,
    I: InputT + ?Sized,
    L: Lexer<'i, Context<'i, I>, State, TokenKind, Input = I>,
    B,
>(
    LRParser<
        'i,
        Context<'i, I>,
        State,
        ProdKind,
        TokenKind,
        NonTermKind,
        CalculatorParserDefinition,
        L,
        B,
        I,
    >,
);
#[allow(dead_code)]
impl<
    'i,
    B,
> CalculatorParser<
    'i,
    Input,
    StringLexer<Context<'i, Input>, State, TokenKind, TokenRecognizer, TERMINAL_COUNT>,
    B,
>
where
    B: LRBuilder<'i, Input, Context<'i, Input>, State, ProdKind, TokenKind>,
{
    pub fn new(builder: B) -> Self {
        Self(
            LRParser::new(
                &PARSER_DEFINITION,
                State::default(),
                false,
                false,
                StringLexer::new(true, &RECOGNIZERS),
                builder,
            ),
        )
    }
}
#[allow(dead_code)]
impl<'i, I, L, B> Parser<'i, I, Context<'i, I>, State, TokenKind>
for CalculatorParser<'i, I, L, B>
where
    I: InputT + ?Sized + Debug,
    L: Lexer<'i, Context<'i, I>, State, TokenKind, Input = I>,
    B: LRBuilder<'i, I, Context<'i, I>, State, ProdKind, TokenKind>,
{
    type Output = B::Output;
    fn parse(&self, input: &'i I) -> Result<Self::Output> {
        self.0.parse(input)
    }
    fn parse_with_context(
        &self,
        context: &mut Context<'i, I>,
        input: &'i I,
    ) -> Result<Self::Output> {
        self.0.parse_with_context(context, input)
    }
    fn parse_file<'a, F: AsRef<std::path::Path>>(
        &'a mut self,
        file: F,
    ) -> Result<Self::Output>
    where
        'a: 'i,
    {
        self.0.parse_file(file)
    }
}
#[allow(dead_code)]
#[derive(Debug)]
pub enum Recognizer {
    Stop,
    StrMatch(&'static str),
    RegexMatch(Lazy<Regex>),
}
#[allow(dead_code)]
#[derive(Debug)]
pub struct TokenRecognizer(TokenKind, Recognizer);
impl<'i> TokenRecognizerT<'i> for TokenRecognizer {
    fn recognize(&self, input: &'i str) -> Option<&'i str> {
        match &self {
            #[allow(unused_variables)]
            TokenRecognizer(token_kind, Recognizer::StrMatch(s)) => {
                logn!("{} {:?} -- ", "    Recognizing".green(), token_kind);
                if input.starts_with(s) {
                    log!("{}", "recognized".bold().green());
                    Some(s)
                } else {
                    log!("{}", "not recognized".red());
                    None
                }
            }
            #[allow(unused_variables)]
            TokenRecognizer(token_kind, Recognizer::RegexMatch(r)) => {
                logn!("{} {:?} -- ", "    Recognizing".green(), token_kind);
                let match_str = r.find(input);
                match match_str {
                    Some(x) => {
                        let x_str = x.as_str();
                        log!("{} '{}'", "recognized".bold().green(), x_str);
                        Some(x_str)
                    }
                    _ => {
                        log!("{}", "not recognized".red());
                        None
                    }
                }
            }
            TokenRecognizer(_, Recognizer::Stop) => {
                logn!("{} STOP -- ", "    Recognizing".green());
                if input.is_empty() {
                    log!("{}", "recognized".bold().green());
                    Some("")
                } else {
                    log!("{}", "not recognized".red());
                    None
                }
            }
        }
    }
}
pub(crate) static RECOGNIZERS: [TokenRecognizer; TERMINAL_COUNT] = [
    TokenRecognizer(TokenKind::STOP, Recognizer::Stop),
    TokenRecognizer(
        TokenKind::Number,
        Recognizer::RegexMatch(
            Lazy::new(|| { Regex::new(concat!("^", "\\d+")).unwrap() }),
        ),
    ),
    TokenRecognizer(
        TokenKind::Symbol,
        Recognizer::RegexMatch(
            Lazy::new(|| { Regex::new(concat!("^", "[\\w--\\d]\\w*")).unwrap() }),
        ),
    ),
    TokenRecognizer(TokenKind::Plus, Recognizer::StrMatch("+")),
    TokenRecognizer(TokenKind::Minus, Recognizer::StrMatch("-")),
    TokenRecognizer(TokenKind::Mul, Recognizer::StrMatch("*")),
    TokenRecognizer(TokenKind::Div, Recognizer::StrMatch("/")),
    TokenRecognizer(TokenKind::Exp, Recognizer::StrMatch("^")),
    TokenRecognizer(TokenKind::BeginParen, Recognizer::StrMatch("(")),
    TokenRecognizer(TokenKind::EndParen, Recognizer::StrMatch(")")),
    TokenRecognizer(TokenKind::Comma, Recognizer::StrMatch(",")),
];
